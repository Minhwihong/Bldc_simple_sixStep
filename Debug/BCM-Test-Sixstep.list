
BCM-Test-Sixstep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000664c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006830  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000000c  0800683c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800683c  00008444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001391a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c5  00000000  00000000  0001b956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd3  00000000  00000000  0001f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002261b  00000000  00000000  0001fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f3c  00000000  00000000  000424b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db326  00000000  00000000  000563f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b68  00000000  00000000  0013175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001362c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080067c0 	.word	0x080067c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080067c0 	.word	0x080067c0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <HAL_GPIO_EXTI_Callback>:
	{6, 60, 	BLDC_STEP_HiZ, BLDC_STEP_PLUS, BLDC_STEP_NEG},

	{4, 361, 	BLDC_STEP_PLUS, BLDC_STEP_PLUS, BLDC_STEP_PLUS},
};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPE3_BLDC_HU_Pin || GPIO_Pin == GPE4_BLDC_HV_Pin || GPIO_Pin == GPE5_BLDC_HW_Pin ){

	}
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f001 f937 	bl	800174a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f980 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fcee 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 fca2 	bl	8000e2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 fc40 	bl	8000d6c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 fc6e 	bl	8000dcc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80004f0:	f000 f9c6 	bl	8000880 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004f4:	f000 fa7a 	bl	80009ec <MX_TIM1_Init>
  MX_TIM6_Init();
 80004f8:	f000 fb3a 	bl	8000b70 <MX_TIM6_Init>
  MX_TIM16_Init();
 80004fc:	f000 fc10 	bl	8000d20 <MX_TIM16_Init>
  MX_TIM15_Init();
 8000500:	f000 fb6c 	bl	8000bdc <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LINK_DC_EN_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800050a:	48aa      	ldr	r0, [pc, #680]	@ (80007b4 <main+0x2e0>)
 800050c:	f002 fcf0 	bl	8002ef0 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOA, BLDC_CAL_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051a:	f002 fce9 	bl	8002ef0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000522:	f001 f987 	bl	8001834 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, BLDC_CAL_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f002 fcde 	bl	8002ef0 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	48a0      	ldr	r0, [pc, #640]	@ (80007b8 <main+0x2e4>)
 8000538:	f003 ffc8 	bl	80044cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800053c:	2108      	movs	r1, #8
 800053e:	489e      	ldr	r0, [pc, #632]	@ (80007b8 <main+0x2e4>)
 8000540:	f003 ffc4 	bl	80044cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	489d      	ldr	r0, [pc, #628]	@ (80007bc <main+0x2e8>)
 8000548:	f003 ffc0 	bl	80044cc <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, BLDC_EN_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000552:	4898      	ldr	r0, [pc, #608]	@ (80007b4 <main+0x2e0>)
 8000554:	f002 fccc 	bl	8002ef0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //GPIOA , GPE3_BLDC_HU_Pin
	g_ucHall_u = HAL_GPIO_ReadPin(GPIOA, GPE3_BLDC_HU_Pin);
 8000558:	2108      	movs	r1, #8
 800055a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055e:	f002 fcaf 	bl	8002ec0 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	4b96      	ldr	r3, [pc, #600]	@ (80007c0 <main+0x2ec>)
 8000568:	701a      	strb	r2, [r3, #0]
	g_ucHall_v = HAL_GPIO_ReadPin(GPIOA, GPE4_BLDC_HV_Pin);
 800056a:	2110      	movs	r1, #16
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f002 fca6 	bl	8002ec0 <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b92      	ldr	r3, [pc, #584]	@ (80007c4 <main+0x2f0>)
 800057a:	701a      	strb	r2, [r3, #0]
	g_ucHall_w = HAL_GPIO_ReadPin(GPIOA, GPE5_BLDC_HW_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f002 fc9d 	bl	8002ec0 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b8f      	ldr	r3, [pc, #572]	@ (80007c8 <main+0x2f4>)
 800058c:	701a      	strb	r2, [r3, #0]

	g_ucHallCombi = (g_ucHall_u) + (g_ucHall_v << 1) + (g_ucHall_w << 2);
 800058e:	4b8d      	ldr	r3, [pc, #564]	@ (80007c4 <main+0x2f0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b8a      	ldr	r3, [pc, #552]	@ (80007c0 <main+0x2ec>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b8a      	ldr	r3, [pc, #552]	@ (80007c8 <main+0x2f4>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b88      	ldr	r3, [pc, #544]	@ (80007cc <main+0x2f8>)
 80005ac:	701a      	strb	r2, [r3, #0]
	BLDC_STEP_PLUS,
	BLDC_STEP_NEG,
};
#endif

	switch(g_ucHallCombi){
 80005ae:	4b87      	ldr	r3, [pc, #540]	@ (80007cc <main+0x2f8>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d862      	bhi.n	800067c <main+0x1a8>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <main+0xe8>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005dd 	.word	0x080005dd
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	08000605 	.word	0x08000605
 80005c8:	08000619 	.word	0x08000619
 80005cc:	0800062d 	.word	0x0800062d
 80005d0:	08000641 	.word	0x08000641
 80005d4:	08000655 	.word	0x08000655
 80005d8:	08000669 	.word	0x08000669

	case 0:
		g_ucPwrOut_U = BLDC_STEP_NEG;
 80005dc:	4b7c      	ldr	r3, [pc, #496]	@ (80007d0 <main+0x2fc>)
 80005de:	2202      	movs	r2, #2
 80005e0:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_NEG;
 80005e2:	4b7c      	ldr	r3, [pc, #496]	@ (80007d4 <main+0x300>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_NEG;
 80005e8:	4b7b      	ldr	r3, [pc, #492]	@ (80007d8 <main+0x304>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
		break;
 80005ee:	e04f      	b.n	8000690 <main+0x1bc>

	case 1:	// Section #2
		g_ucPwrOut_U = BLDC_STEP_NEG;
 80005f0:	4b77      	ldr	r3, [pc, #476]	@ (80007d0 <main+0x2fc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_HiZ;
 80005f6:	4b77      	ldr	r3, [pc, #476]	@ (80007d4 <main+0x300>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_PLUS;
 80005fc:	4b76      	ldr	r3, [pc, #472]	@ (80007d8 <main+0x304>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
//		g_ucPwrOut_U = g_ucHallCommTb[g_ucHallCombi].U_sts;
//		g_ucPwrOut_V = g_ucHallCommTb[g_ucHallCombi].V_sts;
//		g_ucPwrOut_W = g_ucHallCommTb[g_ucHallCombi].W_sts;
		break;
 8000602:	e045      	b.n	8000690 <main+0x1bc>

	case 2:	// Section #4
		g_ucPwrOut_U = BLDC_STEP_PLUS;
 8000604:	4b72      	ldr	r3, [pc, #456]	@ (80007d0 <main+0x2fc>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_NEG;
 800060a:	4b72      	ldr	r3, [pc, #456]	@ (80007d4 <main+0x300>)
 800060c:	2202      	movs	r2, #2
 800060e:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_HiZ;
 8000610:	4b71      	ldr	r3, [pc, #452]	@ (80007d8 <main+0x304>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e03b      	b.n	8000690 <main+0x1bc>

	case 3:	// Section #3
		g_ucPwrOut_U = BLDC_STEP_HiZ;
 8000618:	4b6d      	ldr	r3, [pc, #436]	@ (80007d0 <main+0x2fc>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_NEG;
 800061e:	4b6d      	ldr	r3, [pc, #436]	@ (80007d4 <main+0x300>)
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_PLUS;
 8000624:	4b6c      	ldr	r3, [pc, #432]	@ (80007d8 <main+0x304>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
		break;
 800062a:	e031      	b.n	8000690 <main+0x1bc>

	case 4:	// Section #0
		g_ucPwrOut_U = BLDC_STEP_HiZ;
 800062c:	4b68      	ldr	r3, [pc, #416]	@ (80007d0 <main+0x2fc>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_PLUS;
 8000632:	4b68      	ldr	r3, [pc, #416]	@ (80007d4 <main+0x300>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_NEG;
 8000638:	4b67      	ldr	r3, [pc, #412]	@ (80007d8 <main+0x304>)
 800063a:	2202      	movs	r2, #2
 800063c:	701a      	strb	r2, [r3, #0]
		break;
 800063e:	e027      	b.n	8000690 <main+0x1bc>

	case 5:	// Section #1
		g_ucPwrOut_U = BLDC_STEP_NEG;
 8000640:	4b63      	ldr	r3, [pc, #396]	@ (80007d0 <main+0x2fc>)
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_PLUS;
 8000646:	4b63      	ldr	r3, [pc, #396]	@ (80007d4 <main+0x300>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_HiZ;
 800064c:	4b62      	ldr	r3, [pc, #392]	@ (80007d8 <main+0x304>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
		break;
 8000652:	e01d      	b.n	8000690 <main+0x1bc>

	case 6:	// Section #5
		g_ucPwrOut_U = BLDC_STEP_PLUS;
 8000654:	4b5e      	ldr	r3, [pc, #376]	@ (80007d0 <main+0x2fc>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_HiZ;
 800065a:	4b5e      	ldr	r3, [pc, #376]	@ (80007d4 <main+0x300>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_NEG;
 8000660:	4b5d      	ldr	r3, [pc, #372]	@ (80007d8 <main+0x304>)
 8000662:	2202      	movs	r2, #2
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e013      	b.n	8000690 <main+0x1bc>

	case 7:
		g_ucPwrOut_U = BLDC_STEP_NEG;
 8000668:	4b59      	ldr	r3, [pc, #356]	@ (80007d0 <main+0x2fc>)
 800066a:	2202      	movs	r2, #2
 800066c:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_NEG;
 800066e:	4b59      	ldr	r3, [pc, #356]	@ (80007d4 <main+0x300>)
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_NEG;
 8000674:	4b58      	ldr	r3, [pc, #352]	@ (80007d8 <main+0x304>)
 8000676:	2202      	movs	r2, #2
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e009      	b.n	8000690 <main+0x1bc>
	default:
		g_ucPwrOut_U = BLDC_STEP_NEG;
 800067c:	4b54      	ldr	r3, [pc, #336]	@ (80007d0 <main+0x2fc>)
 800067e:	2202      	movs	r2, #2
 8000680:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_V = BLDC_STEP_NEG;
 8000682:	4b54      	ldr	r3, [pc, #336]	@ (80007d4 <main+0x300>)
 8000684:	2202      	movs	r2, #2
 8000686:	701a      	strb	r2, [r3, #0]
		g_ucPwrOut_W = BLDC_STEP_NEG;
 8000688:	4b53      	ldr	r3, [pc, #332]	@ (80007d8 <main+0x304>)
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
		break;
 800068e:	bf00      	nop
	}


	switch(g_ucPwrOut_U){
 8000690:	4b4f      	ldr	r3, [pc, #316]	@ (80007d0 <main+0x2fc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d01f      	beq.n	80006d8 <main+0x204>
 8000698:	2b02      	cmp	r3, #2
 800069a:	dc29      	bgt.n	80006f0 <main+0x21c>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <main+0x1d2>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d00c      	beq.n	80006be <main+0x1ea>
		case BLDC_STEP_NEG:
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_A_Pin, GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0) ;
			break;
		default:
			break;
 80006a4:	e024      	b.n	80006f0 <main+0x21c>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_A_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f002 fc1e 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0) ;
 80006b4:	4b40      	ldr	r3, [pc, #256]	@ (80007b8 <main+0x2e4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80006bc:	e019      	b.n	80006f2 <main+0x21e>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_A_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f002 fc12 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g_usDuty) ;
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <main+0x308>)
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <main+0x2e4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80006d6:	e00c      	b.n	80006f2 <main+0x21e>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_A_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e2:	f002 fc05 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0) ;
 80006e6:	4b34      	ldr	r3, [pc, #208]	@ (80007b8 <main+0x2e4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80006ee:	e000      	b.n	80006f2 <main+0x21e>
			break;
 80006f0:	bf00      	nop
	}

	switch(g_ucPwrOut_V){
 80006f2:	4b38      	ldr	r3, [pc, #224]	@ (80007d4 <main+0x300>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d01f      	beq.n	800073a <main+0x266>
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	dc29      	bgt.n	8000752 <main+0x27e>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <main+0x234>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d00c      	beq.n	8000720 <main+0x24c>
		case BLDC_STEP_NEG:
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_B_Pin, GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0) ;
			break;
		default:
			break;
 8000706:	e024      	b.n	8000752 <main+0x27e>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_B_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f002 fbed 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0) ;
 8000716:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <main+0x2e4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800071e:	e019      	b.n	8000754 <main+0x280>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_B_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f002 fbe1 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, g_usDuty) ;
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <main+0x308>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <main+0x2e4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000738:	e00c      	b.n	8000754 <main+0x280>
			HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_B_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f002 fbd4 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0) ;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <main+0x2e4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000750:	e000      	b.n	8000754 <main+0x280>
			break;
 8000752:	bf00      	nop
	}

	switch(g_ucPwrOut_W){
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <main+0x304>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d01d      	beq.n	8000798 <main+0x2c4>
 800075c:	2b02      	cmp	r3, #2
 800075e:	dc26      	bgt.n	80007ae <main+0x2da>
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <main+0x296>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d00b      	beq.n	8000780 <main+0x2ac>
		case BLDC_STEP_NEG:
			HAL_GPIO_WritePin(GPIOB, GPO_BLDC_EN_C_Pin, GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0) ;
			break;
		default:
			break;
 8000768:	e021      	b.n	80007ae <main+0x2da>
			HAL_GPIO_WritePin(GPIOB, GPO_BLDC_EN_C_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000770:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <main+0x2e0>)
 8000772:	f002 fbbd 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0) ;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <main+0x2e8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800077e:	e017      	b.n	80007b0 <main+0x2dc>
			HAL_GPIO_WritePin(GPIOB, GPO_BLDC_EN_C_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <main+0x2e0>)
 8000788:	f002 fbb2 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, g_usDuty) ;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <main+0x308>)
 800078e:	881a      	ldrh	r2, [r3, #0]
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <main+0x2e8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8000796:	e00b      	b.n	80007b0 <main+0x2dc>
			HAL_GPIO_WritePin(GPIOB, GPO_BLDC_EN_C_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <main+0x2e0>)
 80007a0:	f002 fba6 	bl	8002ef0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0) ;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <main+0x2e8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80007ac:	e000      	b.n	80007b0 <main+0x2dc>
			break;
 80007ae:	bf00      	nop
	g_ucHall_u = HAL_GPIO_ReadPin(GPIOA, GPE3_BLDC_HU_Pin);
 80007b0:	e6d2      	b.n	8000558 <main+0x84>
 80007b2:	bf00      	nop
 80007b4:	48000400 	.word	0x48000400
 80007b8:	200000d4 	.word	0x200000d4
 80007bc:	2000016c 	.word	0x2000016c
 80007c0:	20000434 	.word	0x20000434
 80007c4:	20000435 	.word	0x20000435
 80007c8:	20000436 	.word	0x20000436
 80007cc:	2000043a 	.word	0x2000043a
 80007d0:	20000437 	.word	0x20000437
 80007d4:	20000438 	.word	0x20000438
 80007d8:	20000439 	.word	0x20000439
 80007dc:	2000043c 	.word	0x2000043c

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	@ 0x58
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2244      	movs	r2, #68	@ 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 ffb9 	bl	8006766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000802:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000806:	f002 fbb1 	bl	8002f6c <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 fbfa 	bl	8001008 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000818:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	2303      	movs	r3, #3
 8000824:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800082a:	230a      	movs	r3, #10
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082e:	2307      	movs	r3, #7
 8000830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fbea 	bl	8003018 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800084a:	f000 fbdd 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	2104      	movs	r1, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f002 ffea 	bl	8003840 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000872:	f000 fbc9 	bl	8001008 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3758      	adds	r7, #88	@ 0x58
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000896:	4b4d      	ldr	r3, [pc, #308]	@ (80009cc <MX_ADC1_Init+0x14c>)
 8000898:	4a4d      	ldr	r2, [pc, #308]	@ (80009d0 <MX_ADC1_Init+0x150>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800089c:	4b4b      	ldr	r3, [pc, #300]	@ (80009cc <MX_ADC1_Init+0x14c>)
 800089e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b49      	ldr	r3, [pc, #292]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008aa:	4b48      	ldr	r3, [pc, #288]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b0:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008bc:	4b43      	ldr	r3, [pc, #268]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80008c8:	4b40      	ldr	r3, [pc, #256]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008ca:	2206      	movs	r2, #6
 80008cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ce:	4b3f      	ldr	r3, [pc, #252]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d6:	4b3d      	ldr	r3, [pc, #244]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008dc:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008e2:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ea:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f0:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f8:	4834      	ldr	r0, [pc, #208]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80008fa:	f001 f94b 	bl	8001b94 <HAL_ADC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000904:	f000 fb80 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000908:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <MX_ADC1_Init+0x154>)
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090c:	2306      	movs	r3, #6
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000910:	2306      	movs	r3, #6
 8000912:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000914:	237f      	movs	r3, #127	@ 0x7f
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000918:	2304      	movs	r3, #4
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4829      	ldr	r0, [pc, #164]	@ (80009cc <MX_ADC1_Init+0x14c>)
 8000926:	f001 fa77 	bl	8001e18 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000930:	f000 fb6a 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_ADC1_Init+0x158>)
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000938:	230c      	movs	r3, #12
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4822      	ldr	r0, [pc, #136]	@ (80009cc <MX_ADC1_Init+0x14c>)
 8000942:	f001 fa69 	bl	8001e18 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800094c:	f000 fb5c 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000950:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_ADC1_Init+0x15c>)
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000954:	2312      	movs	r3, #18
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	481b      	ldr	r0, [pc, #108]	@ (80009cc <MX_ADC1_Init+0x14c>)
 800095e:	f001 fa5b 	bl	8001e18 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000968:	f000 fb4e 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_ADC1_Init+0x160>)
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000970:	2318      	movs	r3, #24
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4814      	ldr	r0, [pc, #80]	@ (80009cc <MX_ADC1_Init+0x14c>)
 800097a:	f001 fa4d 	bl	8001e18 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000984:	f000 fb40 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_ADC1_Init+0x164>)
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800098c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_ADC1_Init+0x14c>)
 8000998:	f001 fa3e 	bl	8001e18 <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80009a2:	f000 fb31 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_ADC1_Init+0x168>)
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009aa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_ADC1_Init+0x14c>)
 80009b6:	f001 fa2f 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80009c0:	f000 fb22 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000028 	.word	0x20000028
 80009d0:	50040000 	.word	0x50040000
 80009d4:	14f00020 	.word	0x14f00020
 80009d8:	19200040 	.word	0x19200040
 80009dc:	1d500080 	.word	0x1d500080
 80009e0:	2e300800 	.word	0x2e300800
 80009e4:	32601000 	.word	0x32601000
 80009e8:	c7520000 	.word	0xc7520000

080009ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09a      	sub	sp, #104	@ 0x68
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	222c      	movs	r2, #44	@ 0x2c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fe9d 	bl	8006766 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a2e:	4a4f      	ldr	r2, [pc, #316]	@ (8000b6c <MX_TIM1_Init+0x180>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a32:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b4b      	ldr	r3, [pc, #300]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a40:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b48      	ldr	r3, [pc, #288]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b46      	ldr	r3, [pc, #280]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a58:	4843      	ldr	r0, [pc, #268]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a5a:	f003 fc1d 	bl	8004298 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 fad0 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a72:	4619      	mov	r1, r3
 8000a74:	483c      	ldr	r0, [pc, #240]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a76:	f004 f89d 	bl	8004bb4 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a80:	f000 fac2 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a84:	4838      	ldr	r0, [pc, #224]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a86:	f003 fcbf 	bl	8004408 <HAL_TIM_PWM_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a90:	f000 faba 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a94:	4834      	ldr	r0, [pc, #208]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000a96:	f003 fc56 	bl	8004346 <HAL_TIM_OC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000aa0:	f000 fab2 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482c      	ldr	r0, [pc, #176]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000ab8:	f004 fd26 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000ac2:	f000 faa1 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	@ 0x60
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000aec:	f003 ff4e 	bl	800498c <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000af6:	f000 fa87 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000afa:	2350      	movs	r3, #80	@ 0x50
 8000afc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b02:	2208      	movs	r2, #8
 8000b04:	4619      	mov	r1, r3
 8000b06:	4818      	ldr	r0, [pc, #96]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000b08:	f003 fec6 	bl	8004898 <HAL_TIM_OC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b12:	f000 fa79 	bl	8001008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000b4c:	f004 fd42 	bl	80055d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000b56:	f000 fa57 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5a:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <MX_TIM1_Init+0x17c>)
 8000b5c:	f000 fb64 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000b60:	bf00      	nop
 8000b62:	3768      	adds	r7, #104	@ 0x68
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000d4 	.word	0x200000d4
 8000b6c:	40012c00 	.word	0x40012c00

08000b70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	@ (8000bd8 <MX_TIM6_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000b88:	224f      	movs	r2, #79	@ 0x4f
 8000b8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000b94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000ba2:	f003 fb79 	bl	8004298 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bac:	f000 fa2c 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_TIM6_Init+0x64>)
 8000bbe:	f004 fca3 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bc8:	f000 fa1e 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000120 	.word	0x20000120
 8000bd8:	40001000 	.word	0x40001000

08000bdc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09a      	sub	sp, #104	@ 0x68
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	222c      	movs	r2, #44	@ 0x2c
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fda5 	bl	8006766 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d1c <MX_TIM15_Init+0x140>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000c22:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3200;
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c30:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000c34:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c3c:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c48:	4833      	ldr	r0, [pc, #204]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c4a:	f003 fb25 	bl	8004298 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000c54:	f000 f9d8 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c62:	4619      	mov	r1, r3
 8000c64:	482c      	ldr	r0, [pc, #176]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c66:	f003 ffa5 	bl	8004bb4 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000c70:	f000 f9ca 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c74:	4828      	ldr	r0, [pc, #160]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c76:	f003 fbc7 	bl	8004408 <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000c80:	f000 f9c2 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4821      	ldr	r0, [pc, #132]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000c94:	f004 fc38 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000c9e:	f000 f9b3 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	@ 0x60
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4814      	ldr	r0, [pc, #80]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000cc8:	f003 fe60 	bl	800498c <HAL_TIM_PWM_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000cd2:	f000 f999 	bl	8001008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000cfa:	f004 fc6b 	bl	80055d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000d04:	f000 f980 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM15_Init+0x13c>)
 8000d0a:	f000 fa8d 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000d0e:	bf00      	nop
 8000d10:	3768      	adds	r7, #104	@ 0x68
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000016c 	.word	0x2000016c
 8000d1c:	40014000 	.word	0x40014000

08000d20 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <MX_TIM16_Init+0x48>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d2c:	224f      	movs	r2, #79	@ 0x4f
 8000d2e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d3c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_TIM16_Init+0x44>)
 8000d52:	f003 faa1 	bl	8004298 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d5c:	f000 f954 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001b8 	.word	0x200001b8
 8000d68:	40014400 	.word	0x40014400

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f004 fca6 	bl	8005700 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f925 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000204 	.word	0x20000204
 8000dc8:	40013800 	.word	0x40013800

08000dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_USART3_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e10:	f004 fc76 	bl	8005700 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f8f5 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000028c 	.word	0x2000028c
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e32:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <MX_DMA_Init+0x90>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2105      	movs	r1, #5
 8000e66:	200c      	movs	r0, #12
 8000e68:	f001 fc93 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f001 fcac 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2105      	movs	r1, #5
 8000e76:	200d      	movs	r0, #13
 8000e78:	f001 fc8b 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e7c:	200d      	movs	r0, #13
 8000e7e:	f001 fca4 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	200e      	movs	r0, #14
 8000e88:	f001 fc83 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e8c:	200e      	movs	r0, #14
 8000e8e:	f001 fc9c 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	200f      	movs	r0, #15
 8000e98:	f001 fc7b 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f001 fc94 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	203a      	movs	r0, #58	@ 0x3a
 8000ea8:	f001 fc73 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000eac:	203a      	movs	r0, #58	@ 0x3a
 8000eae:	f001 fc8c 	bl	80027ca <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a49      	ldr	r2, [pc, #292]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b47      	ldr	r3, [pc, #284]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b44      	ldr	r3, [pc, #272]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a43      	ldr	r2, [pc, #268]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b41      	ldr	r3, [pc, #260]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b3e      	ldr	r3, [pc, #248]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <MX_GPIO_Init+0x140>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LINK_DC_EN_Pin|BLDC_EN_Pin|GPO_BLDC_EN_C_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f24b 013c 	movw	r1, #45116	@ 0xb03c
 8000f24:	4837      	ldr	r0, [pc, #220]	@ (8001004 <MX_GPIO_Init+0x144>)
 8000f26:	f001 ffe3 	bl	8002ef0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|USART1_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPO_BLDC_EN_A_Pin|GPO_BLDC_EN_B_Pin|BLDC_CAL_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f001 ffdc 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPE3_BLDC_HU_Pin GPE4_BLDC_HV_Pin GPE5_BLDC_HW_Pin */
  GPIO_InitStruct.Pin = GPE3_BLDC_HU_Pin|GPE4_BLDC_HV_Pin|GPE5_BLDC_HW_Pin;
 8000f38:	2338      	movs	r3, #56	@ 0x38
 8000f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f3c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f001 fe3c 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SEN_1_Pin LIMIT_SEN_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SEN_1_Pin|LIMIT_SEN_2_Pin;
 8000f54:	2303      	movs	r3, #3
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4827      	ldr	r0, [pc, #156]	@ (8001004 <MX_GPIO_Init+0x144>)
 8000f68:	f001 fe30 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LINK_DC_EN_Pin BLDC_EN_Pin GPO_BLDC_EN_C_Pin
                           LED2_Pin LED3_Pin USART1_DE_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LINK_DC_EN_Pin|BLDC_EN_Pin|GPO_BLDC_EN_C_Pin
 8000f6c:	f24b 033c 	movw	r3, #45116	@ 0xb03c
 8000f70:	60fb      	str	r3, [r7, #12]
                          |LED2_Pin|LED3_Pin|USART1_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	481f      	ldr	r0, [pc, #124]	@ (8001004 <MX_GPIO_Init+0x144>)
 8000f86:	f001 fe21 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO_BLDC_EN_A_Pin GPO_BLDC_EN_B_Pin BLDC_CAL_Pin */
  GPIO_InitStruct.Pin = GPO_BLDC_EN_A_Pin|GPO_BLDC_EN_B_Pin|BLDC_CAL_Pin;
 8000f8a:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f001 fe11 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLDC_FAULT_Pin */
  GPIO_InitStruct.Pin = BLDC_FAULT_Pin;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLDC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f001 fe03 	bl	8002bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2105      	movs	r1, #5
 8000fca:	2009      	movs	r0, #9
 8000fcc:	f001 fbe1 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fd0:	2009      	movs	r0, #9
 8000fd2:	f001 fbfa 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2105      	movs	r1, #5
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f001 fbd9 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f001 fbf2 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	2017      	movs	r0, #23
 8000fec:	f001 fbd1 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff0:	2017      	movs	r0, #23
 8000ff2:	f001 fbea 	bl	80027ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	@ 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	@ 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0a0      	sub	sp, #128	@ 0x80
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	225c      	movs	r2, #92	@ 0x5c
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fb72 	bl	8006766 <memset>
  if(hadc->Instance==ADC1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a33      	ldr	r2, [pc, #204]	@ (8001154 <HAL_ADC_MspInit+0xf8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d15f      	bne.n	800114c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800108c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001090:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001092:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001096:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fdf1 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010a8:	f7ff ffae 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_ADC_MspInit+0xfc>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = AD_BLDC_CUR1_Pin|AD_BLDC_CUR2_Pin|AD_BLDC_CUR3_Pin|AD_PRESS_SEN_Pin
 80010dc:	23c7      	movs	r3, #199	@ 0xc7
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |AD_LINK_CURR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e0:	230b      	movs	r3, #11
 80010e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f2:	f001 fd6b 	bl	8002bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_ADC_MspInit+0x100>)
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <HAL_ADC_MspInit+0x104>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HAL_ADC_MspInit+0x100>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_ADC_MspInit+0x100>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800111a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_ADC_MspInit+0x100>)
 800111e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001122:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001126:	2220      	movs	r2, #32
 8001128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_ADC_MspInit+0x100>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001132:	f001 fb65 	bl	8002800 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800113c:	f7ff ff64 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001144:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <HAL_ADC_MspInit+0x100>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3780      	adds	r7, #128	@ 0x80
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	50040000 	.word	0x50040000
 8001158:	40021000 	.word	0x40021000
 800115c:	2000008c 	.word	0x2000008c
 8001160:	40020430 	.word	0x40020430

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <HAL_TIM_Base_MspInit+0xb0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10c      	bne.n	8001190 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001176:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 800117c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800118e:	e03c      	b.n	800120a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	@ (800121c <HAL_TIM_Base_MspInit+0xb8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d114      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800119a:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	2036      	movs	r0, #54	@ 0x36
 80011b8:	f001 faeb 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011bc:	2036      	movs	r0, #54	@ 0x36
 80011be:	f001 fb04 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 80011c2:	e022      	b.n	800120a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM15)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <HAL_TIM_Base_MspInit+0xbc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10c      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	e010      	b.n	800120a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <HAL_TIM_Base_MspInit+0xc0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10b      	bne.n	800120a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_TIM_Base_MspInit+0xb4>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012c00 	.word	0x40012c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40001000 	.word	0x40001000
 8001220:	40014000 	.word	0x40014000
 8001224:	40014400 	.word	0x40014400

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <HAL_TIM_MspPostInit+0xac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d11e      	bne.n	8001288 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = T1C1_BLDC_PWM_A_Pin|T1C3_BLDC_PWM_B_Pin;
 8001262:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001274:	2301      	movs	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001282:	f001 fca3 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001286:	e021      	b.n	80012cc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <HAL_TIM_MspPostInit+0xb4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11c      	bne.n	80012cc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T15C1_BLDC_PWM_C_Pin;
 80012aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80012bc:	230e      	movs	r3, #14
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(T15C1_BLDC_PWM_C_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	@ (80012e0 <HAL_TIM_MspPostInit+0xb8>)
 80012c8:	f001 fc80 	bl	8002bcc <HAL_GPIO_Init>
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40014000 	.word	0x40014000
 80012e0:	48000400 	.word	0x48000400

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a2      	sub	sp, #136	@ 0x88
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	225c      	movs	r2, #92	@ 0x5c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f005 fa2e 	bl	8006766 <memset>
  if(huart->Instance==USART1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a9a      	ldr	r2, [pc, #616]	@ (8001578 <HAL_UART_MspInit+0x294>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 8093 	bne.w	800143c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800131a:	2300      	movs	r3, #0
 800131c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fcae 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800132e:	f7ff fe6b 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001332:	4b92      	ldr	r3, [pc, #584]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001336:	4a91      	ldr	r2, [pc, #580]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6613      	str	r3, [r2, #96]	@ 0x60
 800133e:	4b8f      	ldr	r3, [pc, #572]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b8c      	ldr	r3, [pc, #560]	@ (800157c <HAL_UART_MspInit+0x298>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a8b      	ldr	r2, [pc, #556]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b89      	ldr	r3, [pc, #548]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001362:	23c0      	movs	r3, #192	@ 0xc0
 8001364:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800137e:	4619      	mov	r1, r3
 8001380:	487f      	ldr	r0, [pc, #508]	@ (8001580 <HAL_UART_MspInit+0x29c>)
 8001382:	f001 fc23 	bl	8002bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 8001388:	4a7f      	ldr	r2, [pc, #508]	@ (8001588 <HAL_UART_MspInit+0x2a4>)
 800138a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800138c:	4b7d      	ldr	r3, [pc, #500]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 800138e:	2202      	movs	r2, #2
 8001390:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001392:	4b7c      	ldr	r3, [pc, #496]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001398:	4b7a      	ldr	r3, [pc, #488]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800139e:	4b79      	ldr	r3, [pc, #484]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013a0:	2280      	movs	r2, #128	@ 0x80
 80013a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a4:	4b77      	ldr	r3, [pc, #476]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013aa:	4b76      	ldr	r3, [pc, #472]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013b0:	4b74      	ldr	r3, [pc, #464]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013b2:	2220      	movs	r2, #32
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b6:	4b73      	ldr	r3, [pc, #460]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013bc:	4871      	ldr	r0, [pc, #452]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013be:	f001 fa1f 	bl	8002800 <HAL_DMA_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80013c8:	f7ff fe1e 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a6d      	ldr	r2, [pc, #436]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80013d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001584 <HAL_UART_MspInit+0x2a0>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80013d8:	4b6c      	ldr	r3, [pc, #432]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013da:	4a6d      	ldr	r2, [pc, #436]	@ (8001590 <HAL_UART_MspInit+0x2ac>)
 80013dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80013de:	4b6b      	ldr	r3, [pc, #428]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e4:	4b69      	ldr	r3, [pc, #420]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013e6:	2210      	movs	r2, #16
 80013e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ea:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f0:	4b66      	ldr	r3, [pc, #408]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013f2:	2280      	movs	r2, #128	@ 0x80
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fc:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001402:	4b62      	ldr	r3, [pc, #392]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001408:	4b60      	ldr	r3, [pc, #384]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800140e:	485f      	ldr	r0, [pc, #380]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 8001410:	f001 f9f6 	bl	8002800 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800141a:	f7ff fdf5 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a5a      	ldr	r2, [pc, #360]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 8001422:	671a      	str	r2, [r3, #112]	@ 0x70
 8001424:	4a59      	ldr	r2, [pc, #356]	@ (800158c <HAL_UART_MspInit+0x2a8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2025      	movs	r0, #37	@ 0x25
 8001430:	f001 f9af 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001434:	2025      	movs	r0, #37	@ 0x25
 8001436:	f001 f9c8 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143a:	e098      	b.n	800156e <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a54      	ldr	r2, [pc, #336]	@ (8001594 <HAL_UART_MspInit+0x2b0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	f040 8093 	bne.w	800156e <HAL_UART_MspInit+0x28a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001448:	2304      	movs	r3, #4
 800144a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fc15 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001460:	f7ff fdd2 	bl	8001008 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001464:	4b45      	ldr	r3, [pc, #276]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	4a44      	ldr	r2, [pc, #272]	@ (800157c <HAL_UART_MspInit+0x298>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <HAL_UART_MspInit+0x298>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a3e      	ldr	r2, [pc, #248]	@ (800157c <HAL_UART_MspInit+0x298>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <HAL_UART_MspInit+0x298>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001494:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001498:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a8:	2307      	movs	r3, #7
 80014aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014b2:	4619      	mov	r1, r3
 80014b4:	4832      	ldr	r0, [pc, #200]	@ (8001580 <HAL_UART_MspInit+0x29c>)
 80014b6:	f001 fb89 	bl	8002bcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014bc:	4a37      	ldr	r2, [pc, #220]	@ (800159c <HAL_UART_MspInit+0x2b8>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80014c0:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014c2:	2202      	movs	r2, #2
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014d4:	2280      	movs	r2, #128	@ 0x80
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014f0:	4829      	ldr	r0, [pc, #164]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 80014f2:	f001 f985 	bl	8002800 <HAL_DMA_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x21c>
      Error_Handler();
 80014fc:	f7ff fd84 	bl	8001008 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 8001504:	675a      	str	r2, [r3, #116]	@ 0x74
 8001506:	4a24      	ldr	r2, [pc, #144]	@ (8001598 <HAL_UART_MspInit+0x2b4>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 800150e:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_UART_MspInit+0x2c0>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001514:	2202      	movs	r2, #2
 8001516:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 800151a:	2210      	movs	r2, #16
 800151c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001542:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001544:	f001 f95c 	bl	8002800 <HAL_DMA_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 800154e:	f7ff fd5b 	bl	8001008 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 8001556:	671a      	str	r2, [r3, #112]	@ 0x70
 8001558:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <HAL_UART_MspInit+0x2bc>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	2027      	movs	r0, #39	@ 0x27
 8001564:	f001 f915 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001568:	2027      	movs	r0, #39	@ 0x27
 800156a:	f001 f92e 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3788      	adds	r7, #136	@ 0x88
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400
 8001584:	20000314 	.word	0x20000314
 8001588:	40020058 	.word	0x40020058
 800158c:	2000035c 	.word	0x2000035c
 8001590:	40020044 	.word	0x40020044
 8001594:	40004800 	.word	0x40004800
 8001598:	200003a4 	.word	0x200003a4
 800159c:	40020030 	.word	0x40020030
 80015a0:	200003ec 	.word	0x200003ec
 80015a4:	4002001c 	.word	0x4002001c

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <NMI_Handler+0x4>

080015b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <UsageFault_Handler+0x4>

080015d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f8f9 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}

08001606 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPE3_BLDC_HU_Pin);
 800160a:	2008      	movs	r0, #8
 800160c:	f001 fc88 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPE4_BLDC_HV_Pin);
 8001618:	2010      	movs	r0, #16
 800161a:	f001 fc81 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Channel2_IRQHandler+0x10>)
 800162a:	f001 fa20 	bl	8002a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200003ec 	.word	0x200003ec

08001638 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Channel3_IRQHandler+0x10>)
 800163e:	f001 fa16 	bl	8002a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003a4 	.word	0x200003a4

0800164c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Channel4_IRQHandler+0x10>)
 8001652:	f001 fa0c 	bl	8002a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000035c 	.word	0x2000035c

08001660 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA1_Channel5_IRQHandler+0x10>)
 8001666:	f001 fa02 	bl	8002a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000314 	.word	0x20000314

08001674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPE5_BLDC_HW_Pin);
 8001678:	2020      	movs	r0, #32
 800167a:	f001 fc51 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <USART1_IRQHandler+0x10>)
 800168a:	f004 f887 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000204 	.word	0x20000204

08001698 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <USART3_IRQHandler+0x10>)
 800169e:	f004 f87d 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000028c 	.word	0x2000028c

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f002 ffe9 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000120 	.word	0x20000120

080016c0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA2_Channel3_IRQHandler+0x10>)
 80016c6:	f001 f9d2 	bl	8002a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000008c 	.word	0x2000008c

080016d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016fc:	f7ff ffea 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopForever+0xe>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopForever+0x16>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001726:	f005 f827 	bl	8006778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172a:	f7fe fed3 	bl	80004d4 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001730:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800173c:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8001740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001744:	20000444 	.word	0x20000444

08001748 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_IRQHandler>

0800174a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f001 f811 	bl	800277c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f80e 	bl	800177c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176c:	f7ff fc52 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_InitTick+0x70>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f81d 	bl	80027e6 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d809      	bhi.n	80017cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 ffe7 	bl	8002792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0x74>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e007      	b.n	80017dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e004      	b.n	80017dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e001      	b.n	80017dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	20000440 	.word	0x20000440

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000440 	.word	0x20000440

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	@ 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <LL_ADC_SetOffset+0x44>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	4313      	orrs	r3, r2
 8001914:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	03fff000 	.word	0x03fff000

0800192c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3360      	adds	r3, #96	@ 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3360      	adds	r3, #96	@ 0x60
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198e:	b480      	push	{r7}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3330      	adds	r3, #48	@ 0x30
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	211f      	movs	r1, #31
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	f003 011f 	and.w	r1, r3, #31
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3314      	adds	r3, #20
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0e5b      	lsrs	r3, r3, #25
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0d1b      	lsrs	r3, r3, #20
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2107      	movs	r1, #7
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0d1b      	lsrs	r3, r3, #20
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0318 	and.w	r3, r3, #24
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	400b      	ands	r3, r1
 8001a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	0007ffff 	.word	0x0007ffff

08001a84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6093      	str	r3, [r2, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <LL_ADC_IsEnabled+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_ADC_IsEnabled+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d101      	bne.n	8001b84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e126      	b.n	8001dfc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fa4d 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff67 	bl	8001aa8 <LL_ADC_IsDeepPowerDownEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff4d 	bl	8001a84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff82 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff66 	bl	8001ad0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c04:	4b7f      	ldr	r3, [pc, #508]	@ (8001e04 <HAL_ADC_Init+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	4a7f      	ldr	r2, [pc, #508]	@ (8001e08 <HAL_ADC_Init+0x274>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff64 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff75 	bl	8001b46 <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 80bf 	bne.w	8001dea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80bb 	bne.w	8001dea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c7c:	f043 0202 	orr.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff49 	bl	8001b20 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c94:	485d      	ldr	r0, [pc, #372]	@ (8001e0c <HAL_ADC_Init+0x278>)
 8001c96:	f7ff ff43 	bl	8001b20 <LL_ADC_IsEnabled>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485a      	ldr	r0, [pc, #360]	@ (8001e10 <HAL_ADC_Init+0x27c>)
 8001ca8:	f7ff fde8 	bl	800187c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e5b      	ldrb	r3, [r3, #25]
 8001cb0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d106      	bne.n	8001ce8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	045b      	lsls	r3, r3, #17
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b42      	ldr	r3, [pc, #264]	@ (8001e14 <HAL_ADC_Init+0x280>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff25 	bl	8001b6c <LL_ADC_INJ_IsConversionOngoing>
 8001d22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13d      	bne.n	8001da6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13a      	bne.n	8001da6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	69b9      	ldr	r1, [r7, #24]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d118      	bne.n	8001d96 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d86:	430a      	orrs	r2, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	e007      	b.n	8001da6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10c      	bne.n	8001dc8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	f023 010f 	bic.w	r1, r3, #15
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020f 	bic.w	r2, r2, #15
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f023 0303 	bic.w	r3, r3, #3
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001de8:	e007      	b.n	8001dfa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	053e2d63 	.word	0x053e2d63
 8001e0c:	50040000 	.word	0x50040000
 8001e10:	50040300 	.word	0x50040300
 8001e14:	fff0c007 	.word	0xfff0c007

08001e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0b6      	sub	sp, #216	@ 0xd8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x22>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e3bb      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x79a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe7d 	bl	8001b46 <LL_ADC_REG_IsConversionOngoing>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 83a0 	bne.w	8002594 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d824      	bhi.n	8001eae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	3b02      	subs	r3, #2
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d81b      	bhi.n	8001ea6 <HAL_ADC_ConfigChannel+0x8e>
 8001e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <HAL_ADC_ConfigChannel+0x5c>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e8d 	.word	0x08001e8d
 8001e7c:	08001e95 	.word	0x08001e95
 8001e80:	08001e9d 	.word	0x08001e9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e84:	230c      	movs	r3, #12
 8001e86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e8a:	e010      	b.n	8001eae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e8c:	2312      	movs	r3, #18
 8001e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e92:	e00c      	b.n	8001eae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e94:	2318      	movs	r3, #24
 8001e96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e9a:	e008      	b.n	8001eae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea4:	e003      	b.n	8001eae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ebc:	f7ff fd67 	bl	800198e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fe3e 	bl	8001b46 <LL_ADC_REG_IsConversionOngoing>
 8001eca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fe4a 	bl	8001b6c <LL_ADC_INJ_IsConversionOngoing>
 8001ed8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 81a4 	bne.w	800222e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 819f 	bne.w	800222e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f7ff fd72 	bl	80019e6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d00a      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6919      	ldr	r1, [r3, #16]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f34:	f7ff fcd6 	bl	80018e4 <LL_ADC_SetOffset>
 8001f38:	e179      	b.n	800222e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fcf3 	bl	800192c <LL_ADC_GetOffsetChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x14e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fce8 	bl	800192c <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	e01e      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x18c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fcdd 	bl	800192c <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e004      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1a4>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	e018      	b.n	8001fee <HAL_ADC_ConfigChannel+0x1d6>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e004      	b.n	8001fee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fcac 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fc90 	bl	800192c <LL_ADC_GetOffsetChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_ADC_ConfigChannel+0x214>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fc85 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	f003 021f 	and.w	r2, r3, #31
 800202a:	e01e      	b.n	800206a <HAL_ADC_ConfigChannel+0x252>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc7a 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800204a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800204e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e004      	b.n	8002068 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800205e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x26a>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	e018      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x29c>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800209a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800209e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	2101      	movs	r1, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fc49 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2102      	movs	r1, #2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fc2d 	bl	800192c <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x2da>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2102      	movs	r1, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fc22 	bl	800192c <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	e01e      	b.n	8002130 <HAL_ADC_ConfigChannel+0x318>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fc17 	bl	800192c <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e004      	b.n	800212e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x330>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	e014      	b.n	8002172 <HAL_ADC_ConfigChannel+0x35a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800215c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e004      	b.n	8002172 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002172:	429a      	cmp	r2, r3
 8002174:	d106      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	2102      	movs	r1, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fbea 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2103      	movs	r1, #3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fbce 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x398>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbc3 	bl	800192c <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	e017      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x3c8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2103      	movs	r1, #3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fbb8 	bl	800192c <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80021cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80021d2:	2320      	movs	r3, #32
 80021d4:	e003      	b.n	80021de <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80021d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x3e0>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	e011      	b.n	800221c <HAL_ADC_ConfigChannel+0x404>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002208:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800220a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	2103      	movs	r1, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fb95 	bl	8001958 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fc74 	bl	8001b20 <LL_ADC_IsEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 8140 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff fbf5 	bl	8001a3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a8f      	ldr	r2, [pc, #572]	@ (8002494 <HAL_ADC_ConfigChannel+0x67c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	f040 8131 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x46e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	3301      	adds	r3, #1
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b09      	cmp	r3, #9
 800227c:	bf94      	ite	ls
 800227e:	2301      	movls	r3, #1
 8002280:	2300      	movhi	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e019      	b.n	80022ba <HAL_ADC_ConfigChannel+0x4a2>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e003      	b.n	80022aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	bf94      	ite	ls
 80022b4:	2301      	movls	r3, #1
 80022b6:	2300      	movhi	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d079      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d107      	bne.n	80022da <HAL_ADC_ConfigChannel+0x4c2>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d8:	e015      	b.n	8002306 <HAL_ADC_ConfigChannel+0x4ee>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e003      	b.n	80022fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	069b      	lsls	r3, r3, #26
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x50e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	e017      	b.n	8002356 <HAL_ADC_ConfigChannel+0x53e>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002336:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	ea42 0103 	orr.w	r1, r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x564>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	e018      	b.n	80023ae <HAL_ADC_ConfigChannel+0x596>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ae:	430b      	orrs	r3, r1
 80023b0:	e081      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x5b6>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023cc:	e015      	b.n	80023fa <HAL_ADC_ConfigChannel+0x5e2>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	069b      	lsls	r3, r3, #26
 80023f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_ADC_ConfigChannel+0x602>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x632>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	61bb      	str	r3, [r7, #24]
  return result;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	ea42 0103 	orr.w	r1, r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x65e>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x69c>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	60fb      	str	r3, [r7, #12]
  return result;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	e006      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x688>
 8002492:	bf00      	nop
 8002494:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7ff fa93 	bl	80019e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_ADC_ConfigChannel+0x7a4>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06c      	beq.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024cc:	483c      	ldr	r0, [pc, #240]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7a8>)
 80024ce:	f7ff f9fb 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 80024d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a3a      	ldr	r2, [pc, #232]	@ (80025c4 <HAL_ADC_ConfigChannel+0x7ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d127      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d121      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a35      	ldr	r2, [pc, #212]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7b0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d157      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024fe:	4619      	mov	r1, r3
 8002500:	482f      	ldr	r0, [pc, #188]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002502:	f7ff f9ce 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002506:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <HAL_ADC_ConfigChannel+0x7b4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	4a30      	ldr	r2, [pc, #192]	@ (80025d0 <HAL_ADC_ConfigChannel+0x7b8>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800252e:	e03a      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a27      	ldr	r2, [pc, #156]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d113      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800253a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800253e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d12a      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002558:	4619      	mov	r1, r3
 800255a:	4819      	ldr	r0, [pc, #100]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800255c:	f7ff f9a1 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002560:	e021      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d11c      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800256c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002586:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800258e:	f7ff f988 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
 8002592:	e008      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	37d8      	adds	r7, #216	@ 0xd8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	80080000 	.word	0x80080000
 80025c0:	50040300 	.word	0x50040300
 80025c4:	c7520000 	.word	0xc7520000
 80025c8:	50040000 	.word	0x50040000
 80025cc:	20000000 	.word	0x20000000
 80025d0:	053e2d63 	.word	0x053e2d63
 80025d4:	cb840000 	.word	0xcb840000
 80025d8:	80000001 	.word	0x80000001

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4907      	ldr	r1, [pc, #28]	@ (8002678 <__NVIC_EnableIRQ+0x38>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db0a      	blt.n	80026a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <__NVIC_SetPriority+0x4c>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	440b      	add	r3, r1
 80026a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a4:	e00a      	b.n	80026bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4908      	ldr	r1, [pc, #32]	@ (80026cc <__NVIC_SetPriority+0x50>)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3b04      	subs	r3, #4
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	440b      	add	r3, r1
 80026ba:	761a      	strb	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f1c3 0307 	rsb	r3, r3, #7
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf28      	it	cs
 80026ee:	2304      	movcs	r3, #4
 80026f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d902      	bls.n	8002700 <NVIC_EncodePriority+0x30>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3b03      	subs	r3, #3
 80026fe:	e000      	b.n	8002702 <NVIC_EncodePriority+0x32>
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43d9      	mvns	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	4313      	orrs	r3, r2
         );
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ff8e 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff29 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff3e 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff8e 	bl	80026d0 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5d 	bl	800267c <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff31 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa2 	bl	8002738 <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e098      	b.n	8002944 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_DMA_Init+0x150>)
 800281a:	429a      	cmp	r2, r3
 800281c:	d80f      	bhi.n	800283e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_DMA_Init+0x154>)
 8002826:	4413      	add	r3, r2
 8002828:	4a4b      	ldr	r2, [pc, #300]	@ (8002958 <HAL_DMA_Init+0x158>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a48      	ldr	r2, [pc, #288]	@ (800295c <HAL_DMA_Init+0x15c>)
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40
 800283c:	e00e      	b.n	800285c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b46      	ldr	r3, [pc, #280]	@ (8002960 <HAL_DMA_Init+0x160>)
 8002846:	4413      	add	r3, r2
 8002848:	4a43      	ldr	r2, [pc, #268]	@ (8002958 <HAL_DMA_Init+0x158>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	009a      	lsls	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a42      	ldr	r2, [pc, #264]	@ (8002964 <HAL_DMA_Init+0x164>)
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028b6:	d039      	beq.n	800292c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	4a27      	ldr	r2, [pc, #156]	@ (800295c <HAL_DMA_Init+0x15c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d11a      	bne.n	80028f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028c2:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <HAL_DMA_Init+0x168>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	f003 031c 	and.w	r3, r3, #28
 80028ce:	210f      	movs	r1, #15
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4924      	ldr	r1, [pc, #144]	@ (8002968 <HAL_DMA_Init+0x168>)
 80028d8:	4013      	ands	r3, r2
 80028da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028dc:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <HAL_DMA_Init+0x168>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	f003 031c 	and.w	r3, r3, #28
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	491d      	ldr	r1, [pc, #116]	@ (8002968 <HAL_DMA_Init+0x168>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
 80028f6:	e019      	b.n	800292c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028f8:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <HAL_DMA_Init+0x16c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	f003 031c 	and.w	r3, r3, #28
 8002904:	210f      	movs	r1, #15
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	4917      	ldr	r1, [pc, #92]	@ (800296c <HAL_DMA_Init+0x16c>)
 800290e:	4013      	ands	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002912:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_DMA_Init+0x16c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f003 031c 	and.w	r3, r3, #28
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	4911      	ldr	r1, [pc, #68]	@ (800296c <HAL_DMA_Init+0x16c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40020407 	.word	0x40020407
 8002954:	bffdfff8 	.word	0xbffdfff8
 8002958:	cccccccd 	.word	0xcccccccd
 800295c:	40020000 	.word	0x40020000
 8002960:	bffdfbf8 	.word	0xbffdfbf8
 8002964:	40020400 	.word	0x40020400
 8002968:	400200a8 	.word	0x400200a8
 800296c:	400204a8 	.word	0x400204a8

08002970 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d008      	beq.n	800299a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 020e 	bic.w	r2, r2, #14
 80029a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f003 021c 	and.w	r2, r3, #28
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d005      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2204      	movs	r2, #4
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e029      	b.n	8002a64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 020e 	bic.w	r2, r2, #14
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	f003 021c 	and.w	r2, r3, #28
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
    }
  }
  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	2204      	movs	r2, #4
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d026      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x7a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d021      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f003 021c 	and.w	r2, r3, #28
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2104      	movs	r1, #4
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d071      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ae6:	e06c      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f003 031c 	and.w	r3, r3, #28
 8002af0:	2202      	movs	r2, #2
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02e      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xec>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d029      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020a 	bic.w	r2, r2, #10
 8002b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b30:	f003 021c 	and.w	r2, r3, #28
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	2102      	movs	r1, #2
 8002b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d038      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b58:	e033      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f003 031c 	and.w	r3, r3, #28
 8002b62:	2208      	movs	r2, #8
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x156>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d025      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 020e 	bic.w	r2, r2, #14
 8002b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	f003 021c 	and.w	r2, r3, #28
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2101      	movs	r1, #1
 8002b96:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
}
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	e154      	b.n	8002e86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8146 	beq.w	8002e80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a0 	beq.w	8002e80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d44:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d58:	4a53      	ldr	r2, [pc, #332]	@ (8002ea8 <HAL_GPIO_Init+0x2dc>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d82:	d019      	beq.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a49      	ldr	r2, [pc, #292]	@ (8002eac <HAL_GPIO_Init+0x2e0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_GPIO_Init+0x1e8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a48      	ldr	r2, [pc, #288]	@ (8002eb0 <HAL_GPIO_Init+0x2e4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00d      	beq.n	8002db0 <HAL_GPIO_Init+0x1e4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a47      	ldr	r2, [pc, #284]	@ (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <HAL_GPIO_Init+0x1e0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a46      	ldr	r2, [pc, #280]	@ (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_GPIO_Init+0x1dc>
 8002da4:	2304      	movs	r3, #4
 8002da6:	e008      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002da8:	2307      	movs	r3, #7
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002dac:	2303      	movs	r3, #3
 8002dae:	e004      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db8:	2300      	movs	r3, #0
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	f002 0203 	and.w	r2, r2, #3
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dca:	4937      	ldr	r1, [pc, #220]	@ (8002ea8 <HAL_GPIO_Init+0x2dc>)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd8:	4b38      	ldr	r3, [pc, #224]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e02:	4b2e      	ldr	r3, [pc, #184]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e26:	4a25      	ldr	r2, [pc, #148]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e2c:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e50:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e7a:	4a10      	ldr	r2, [pc, #64]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f aea3 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	48000400 	.word	0x48000400
 8002eb0:	48000800 	.word	0x48000800
 8002eb4:	48000c00 	.word	0x48000c00
 8002eb8:	48001000 	.word	0x48001000
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fabc 	bl	80004bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40007000 	.word	0x40007000

08002f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f7a:	d130      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7c:	4b23      	ldr	r3, [pc, #140]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f88:	d038      	beq.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f92:	4a1e      	ldr	r2, [pc, #120]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2232      	movs	r2, #50	@ 0x32
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb0:	e002      	b.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb8:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc4:	d102      	bne.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f2      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd8:	d110      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fea:	d007      	beq.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fec:	4b07      	ldr	r3, [pc, #28]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ffa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40007000 	.word	0x40007000
 8003010:	20000000 	.word	0x20000000
 8003014:	431bde83 	.word	0x431bde83

08003018 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f000 bc02 	b.w	8003830 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302c:	4b96      	ldr	r3, [pc, #600]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003036:	4b94      	ldr	r3, [pc, #592]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80e4 	beq.w	8003216 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_RCC_OscConfig+0x4c>
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	f040 808b 	bne.w	8003172 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 8087 	bne.w	8003172 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003064:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x64>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e3d9      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	4b81      	ldr	r3, [pc, #516]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_RCC_OscConfig+0x7e>
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003094:	e005      	b.n	80030a2 <HAL_RCC_OscConfig+0x8a>
 8003096:	4b7c      	ldr	r3, [pc, #496]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d223      	bcs.n	80030ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fd8a 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e3ba      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ba:	4b73      	ldr	r3, [pc, #460]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a72      	ldr	r2, [pc, #456]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	496d      	ldr	r1, [pc, #436]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4968      	ldr	r1, [pc, #416]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e025      	b.n	800313a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ee:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4960      	ldr	r1, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310c:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	495b      	ldr	r1, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fd4a 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e37a      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313a:	f000 fc81 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b51      	ldr	r3, [pc, #324]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4950      	ldr	r1, [pc, #320]	@ (800328c <HAL_RCC_OscConfig+0x274>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a4e      	ldr	r2, [pc, #312]	@ (8003290 <HAL_RCC_OscConfig+0x278>)
 8003158:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315a:	4b4e      	ldr	r3, [pc, #312]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fb0c 	bl	800177c <HAL_InitTick>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d052      	beq.n	8003214 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	e35e      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d032      	beq.n	80031e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317a:	4b43      	ldr	r3, [pc, #268]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a42      	ldr	r2, [pc, #264]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003186:	f7fe fb49 	bl	800181c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318e:	f7fe fb45 	bl	800181c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e347      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a0:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4930      	ldr	r1, [pc, #192]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	492b      	ldr	r1, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e01a      	b.n	8003216 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a28      	ldr	r2, [pc, #160]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fb16 	bl	800181c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f4:	f7fe fb12 	bl	800181c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e314      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x1dc>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d073      	beq.n	800330a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x21c>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d10e      	bne.n	800324c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d10b      	bne.n	800324c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d063      	beq.n	8003308 <HAL_RCC_OscConfig+0x2f0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d15f      	bne.n	8003308 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e2f1      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x24c>
 8003256:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a0b      	ldr	r2, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e025      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800326c:	d114      	bne.n	8003298 <HAL_RCC_OscConfig+0x280>
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a02      	ldr	r2, [pc, #8]	@ (8003288 <HAL_RCC_OscConfig+0x270>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e013      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
 8003288:	40021000 	.word	0x40021000
 800328c:	080067d8 	.word	0x080067d8
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004
 8003298:	4ba0      	ldr	r3, [pc, #640]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a9f      	ldr	r2, [pc, #636]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b9d      	ldr	r3, [pc, #628]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a9c      	ldr	r2, [pc, #624]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fab0 	bl	800181c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe faac 	bl	800181c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e2ae      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d2:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2a8>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fa9c 	bl	800181c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fa98 	bl	800181c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e29a      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fa:	4b88      	ldr	r3, [pc, #544]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2d0>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d060      	beq.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d005      	beq.n	8003328 <HAL_RCC_OscConfig+0x310>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d119      	bne.n	8003356 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d116      	bne.n	8003356 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003328:	4b7c      	ldr	r3, [pc, #496]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x328>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e277      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b76      	ldr	r3, [pc, #472]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	4973      	ldr	r1, [pc, #460]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003354:	e040      	b.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d023      	beq.n	80033a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335e:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6e      	ldr	r2, [pc, #440]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fa57 	bl	800181c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003372:	f7fe fa53 	bl	800181c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e255      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003384:	4b65      	ldr	r3, [pc, #404]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b62      	ldr	r3, [pc, #392]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	495f      	ldr	r1, [pc, #380]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	e018      	b.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a6:	4b5d      	ldr	r3, [pc, #372]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5c      	ldr	r2, [pc, #368]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe fa33 	bl	800181c <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fa2f 	bl	800181c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e231      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033cc:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d03c      	beq.n	800345e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01c      	beq.n	8003426 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ec:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f2:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fa0e 	bl	800181c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fa0a 	bl	800181c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e20c      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003416:	4b41      	ldr	r3, [pc, #260]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ef      	beq.n	8003404 <HAL_RCC_OscConfig+0x3ec>
 8003424:	e01b      	b.n	800345e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003426:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342c:	4a3b      	ldr	r2, [pc, #236]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe f9f1 	bl	800181c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe f9ed 	bl	800181c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1ef      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003450:	4b32      	ldr	r3, [pc, #200]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ef      	bne.n	800343e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80a6 	beq.w	80035b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003470:	4b2a      	ldr	r3, [pc, #168]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347c:	4b27      	ldr	r3, [pc, #156]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	4a26      	ldr	r2, [pc, #152]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003486:	6593      	str	r3, [r2, #88]	@ 0x58
 8003488:	4b24      	ldr	r3, [pc, #144]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003494:	2301      	movs	r3, #1
 8003496:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	4b21      	ldr	r3, [pc, #132]	@ (8003520 <HAL_RCC_OscConfig+0x508>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d118      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <HAL_RCC_OscConfig+0x508>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_RCC_OscConfig+0x508>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b0:	f7fe f9b4 	bl	800181c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b8:	f7fe f9b0 	bl	800181c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1b2      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_RCC_OscConfig+0x508>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4d8>
 80034de:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e4:	4a0d      	ldr	r2, [pc, #52]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034ee:	e029      	b.n	8003544 <HAL_RCC_OscConfig+0x52c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d115      	bne.n	8003524 <HAL_RCC_OscConfig+0x50c>
 80034f8:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	4a07      	ldr	r2, [pc, #28]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	4a03      	ldr	r2, [pc, #12]	@ (800351c <HAL_RCC_OscConfig+0x504>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x52c>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	4b9a      	ldr	r3, [pc, #616]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a99      	ldr	r2, [pc, #612]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003534:	4b96      	ldr	r3, [pc, #600]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	4a95      	ldr	r2, [pc, #596]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe f966 	bl	800181c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003552:	e00a      	b.n	800356a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe f962 	bl	800181c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e162      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	4b89      	ldr	r3, [pc, #548]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ed      	beq.n	8003554 <HAL_RCC_OscConfig+0x53c>
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe f94f 	bl	800181c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe f94b 	bl	800181c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e14b      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003598:	4b7d      	ldr	r3, [pc, #500]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ed      	bne.n	8003582 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b78      	ldr	r3, [pc, #480]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	4a77      	ldr	r2, [pc, #476]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03c      	beq.n	800363e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01c      	beq.n	8003606 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035cc:	4b70      	ldr	r3, [pc, #448]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80035ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe f91e 	bl	800181c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e4:	f7fe f91a 	bl	800181c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e11c      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035f6:	4b66      	ldr	r3, [pc, #408]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCC_OscConfig+0x5cc>
 8003604:	e01b      	b.n	800363e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003606:	4b62      	ldr	r3, [pc, #392]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800360c:	4a60      	ldr	r2, [pc, #384]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe f901 	bl	800181c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361e:	f7fe f8fd 	bl	800181c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0ff      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003630:	4b57      	ldr	r3, [pc, #348]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80f3 	beq.w	800382e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	2b02      	cmp	r3, #2
 800364e:	f040 80c9 	bne.w	80037e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003652:	4b4f      	ldr	r3, [pc, #316]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0203 	and.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	429a      	cmp	r2, r3
 8003664:	d12c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	3b01      	subs	r3, #1
 8003672:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d123      	bne.n	80036c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d11b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d113      	bne.n	80036c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d109      	bne.n	80036c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d06b      	beq.n	8003798 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d062      	beq.n	800378c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036c6:	4b32      	ldr	r3, [pc, #200]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0ac      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2d      	ldr	r2, [pc, #180]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e2:	f7fe f89b 	bl	800181c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fe f897 	bl	800181c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e099      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003708:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x77c>)
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003722:	0212      	lsls	r2, r2, #8
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0552      	lsls	r2, r2, #21
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0652      	lsls	r2, r2, #25
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003742:	06d2      	lsls	r2, r2, #27
 8003744:	430a      	orrs	r2, r1
 8003746:	4912      	ldr	r1, [pc, #72]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003748:	4313      	orrs	r3, r2
 800374a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0f      	ldr	r2, [pc, #60]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003756:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003764:	f7fe f85a 	bl	800181c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe f856 	bl	800181c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e058      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378a:	e050      	b.n	800382e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04f      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
 8003790:	40021000 	.word	0x40021000
 8003794:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003798:	4b27      	ldr	r3, [pc, #156]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d144      	bne.n	800382e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a4:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a23      	ldr	r2, [pc, #140]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b0:	4b21      	ldr	r3, [pc, #132]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a20      	ldr	r2, [pc, #128]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037bc:	f7fe f82e 	bl	800181c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe f82a 	bl	800181c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e02c      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x7ac>
 80037e2:	e024      	b.n	800382e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d01f      	beq.n	800382a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 80037f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe f811 	bl	800181c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe f80d 	bl	800181c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e00f      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f0      	bne.n	80037fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	4905      	ldr	r1, [pc, #20]	@ (8003838 <HAL_RCC_OscConfig+0x820>)
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_OscConfig+0x824>)
 8003824:	4013      	ands	r3, r2
 8003826:	60cb      	str	r3, [r1, #12]
 8003828:	e001      	b.n	800382e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	feeefffc 	.word	0xfeeefffc

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0e7      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b75      	ldr	r3, [pc, #468]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d910      	bls.n	8003884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b72      	ldr	r3, [pc, #456]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0207 	bic.w	r2, r3, #7
 800386a:	4970      	ldr	r1, [pc, #448]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b6e      	ldr	r3, [pc, #440]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0cf      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b66      	ldr	r3, [pc, #408]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389c:	429a      	cmp	r2, r3
 800389e:	d908      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b63      	ldr	r3, [pc, #396]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4960      	ldr	r1, [pc, #384]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04c      	beq.n	8003958 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d121      	bne.n	8003916 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0a6      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038de:	4b54      	ldr	r3, [pc, #336]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e09a      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e08e      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003906:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e086      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4943      	ldr	r1, [pc, #268]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd ff78 	bl	800181c <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd ff74 	bl	800181c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e06e      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b3a      	ldr	r3, [pc, #232]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003970:	429a      	cmp	r2, r3
 8003972:	d208      	bcs.n	8003986 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	492b      	ldr	r1, [pc, #172]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003986:	4b29      	ldr	r3, [pc, #164]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d210      	bcs.n	80039b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003994:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 0207 	bic.w	r2, r3, #7
 800399c:	4923      	ldr	r1, [pc, #140]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a4:	4b21      	ldr	r3, [pc, #132]	@ (8003a2c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e036      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4918      	ldr	r1, [pc, #96]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e0:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4910      	ldr	r1, [pc, #64]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f4:	f000 f824 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	490b      	ldr	r1, [pc, #44]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f4>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_RCC_ClockConfig+0x1f8>)
 8003a12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <HAL_RCC_ClockConfig+0x1fc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd feaf 	bl	800177c <HAL_InitTick>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a22:	7afb      	ldrb	r3, [r7, #11]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40021000 	.word	0x40021000
 8003a34:	080067d8 	.word	0x080067d8
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	@ 0x24
 8003a44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a58:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d121      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d11e      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a74:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a80:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a90:	4b2d      	ldr	r3, [pc, #180]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e004      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d134      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d003      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0xac>
 8003ae4:	e005      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	e005      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aec:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aee:	617b      	str	r3, [r7, #20]
      break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	617b      	str	r3, [r7, #20]
      break;
 8003af6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	3301      	adds	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	fb03 f202 	mul.w	r2, r3, r2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0e5b      	lsrs	r3, r3, #25
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b38:	69bb      	ldr	r3, [r7, #24]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	@ 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	080067f0 	.word	0x080067f0
 8003b50:	00f42400 	.word	0x00f42400

08003b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000000 	.word	0x20000000

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b70:	f7ff fff0 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4904      	ldr	r1, [pc, #16]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	080067e8 	.word	0x080067e8

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b9c:	f7ff ffda 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	0adb      	lsrs	r3, r3, #11
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4904      	ldr	r1, [pc, #16]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	080067e8 	.word	0x080067e8

08003bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bdc:	f7ff f9b8 	bl	8002f50 <HAL_PWREx_GetVoltageRange>
 8003be0:	6178      	str	r0, [r7, #20]
 8003be2:	e014      	b.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	4a24      	ldr	r2, [pc, #144]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf0:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bfc:	f7ff f9a8 	bl	8002f50 <HAL_PWREx_GetVoltageRange>
 8003c00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c14:	d10b      	bne.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b80      	cmp	r3, #128	@ 0x80
 8003c1a:	d919      	bls.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c20:	d902      	bls.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c22:	2302      	movs	r3, #2
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e013      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e010      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	@ 0x80
 8003c32:	d902      	bls.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c34:	2303      	movs	r3, #3
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e00a      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b80      	cmp	r3, #128	@ 0x80
 8003c3e:	d102      	bne.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c40:	2302      	movs	r3, #2
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e004      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b70      	cmp	r3, #112	@ 0x70
 8003c4a:	d101      	bne.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 0207 	bic.w	r2, r3, #7
 8003c58:	4909      	ldr	r1, [pc, #36]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40022000 	.word	0x40022000

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d031      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ca8:	d01a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003caa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cae:	d814      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cba:	4b5d      	ldr	r3, [pc, #372]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc6:	e00c      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f9f0 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce8:	4b51      	ldr	r3, [pc, #324]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	494e      	ldr	r1, [pc, #312]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cfe:	e001      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 809e 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	4b40      	ldr	r3, [pc, #256]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	4a3f      	ldr	r2, [pc, #252]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d38:	4b3d      	ldr	r3, [pc, #244]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d48:	4b3a      	ldr	r3, [pc, #232]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a39      	ldr	r2, [pc, #228]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d54:	f7fd fd62 	bl	800181c <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5c:	f7fd fd5e 	bl	800181c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d6e:	e005      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ef      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d15a      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d82:	4b2b      	ldr	r3, [pc, #172]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d9e:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003daa:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dca:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fd1e 	bl	800181c <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	e00b      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fd1a 	bl	800181c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d902      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	74fb      	strb	r3, [r7, #19]
            break;
 8003dfa:	e006      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ec      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	4904      	ldr	r1, [pc, #16]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e26:	e009      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3c:	7c7b      	ldrb	r3, [r7, #17]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b9b      	ldr	r3, [pc, #620]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a9a      	ldr	r2, [pc, #616]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e5a:	4b95      	ldr	r3, [pc, #596]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f023 0203 	bic.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4991      	ldr	r1, [pc, #580]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f023 020c 	bic.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	4989      	ldr	r1, [pc, #548]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e9e:	4b84      	ldr	r3, [pc, #528]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	4980      	ldr	r1, [pc, #512]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	4978      	ldr	r1, [pc, #480]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee2:	4b73      	ldr	r3, [pc, #460]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	496f      	ldr	r1, [pc, #444]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f04:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	4967      	ldr	r1, [pc, #412]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f26:	4b62      	ldr	r3, [pc, #392]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	495e      	ldr	r1, [pc, #376]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f48:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	4956      	ldr	r1, [pc, #344]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	494d      	ldr	r1, [pc, #308]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d028      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8c:	4b48      	ldr	r3, [pc, #288]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9a:	4945      	ldr	r1, [pc, #276]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003faa:	d106      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a3f      	ldr	r2, [pc, #252]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
 8003fb8:	e011      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f872 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d028      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fea:	4b31      	ldr	r3, [pc, #196]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff8:	492d      	ldr	r1, [pc, #180]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004008:	d106      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a28      	ldr	r2, [pc, #160]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004014:	60d3      	str	r3, [r2, #12]
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f843 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004056:	4916      	ldr	r1, [pc, #88]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004066:	d10c      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f820 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	4904      	ldr	r1, [pc, #16]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000

080040b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c2:	4b74      	ldr	r3, [pc, #464]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ce:	4b71      	ldr	r3, [pc, #452]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0203 	and.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
       ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
       ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d047      	beq.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e044      	b.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d018      	beq.n	800413a <RCCEx_PLLSAI1_Config+0x86>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d825      	bhi.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x62>
 8004110:	2b02      	cmp	r3, #2
 8004112:	d009      	beq.n	8004128 <RCCEx_PLLSAI1_Config+0x74>
 8004114:	e020      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004116:	4b5f      	ldr	r3, [pc, #380]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11d      	bne.n	800415e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004126:	e01a      	b.n	800415e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004128:	4b5a      	ldr	r3, [pc, #360]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d116      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e013      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413a:	4b56      	ldr	r3, [pc, #344]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004146:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004156:	e006      	b.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e004      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800415e:	bf00      	nop
 8004160:	e002      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004166:	bf00      	nop
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800416e:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	430b      	orrs	r3, r1
 8004184:	4943      	ldr	r1, [pc, #268]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d17c      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004190:	4b40      	ldr	r3, [pc, #256]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3f      	ldr	r2, [pc, #252]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fb3e 	bl	800181c <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a2:	e009      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a4:	f7fd fb3a 	bl	800181c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	73fb      	strb	r3, [r7, #15]
        break;
 80041b6:	e005      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b8:	4b36      	ldr	r3, [pc, #216]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ef      	bne.n	80041a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d15f      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d0:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80041d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6892      	ldr	r2, [r2, #8]
 80041e0:	0211      	lsls	r1, r2, #8
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	06d2      	lsls	r2, r2, #27
 80041e8:	430a      	orrs	r2, r1
 80041ea:	492a      	ldr	r1, [pc, #168]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]
 80041f0:	e027      	b.n	8004242 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d112      	bne.n	800421e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f8:	4b26      	ldr	r3, [pc, #152]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004200:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6912      	ldr	r2, [r2, #16]
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0552      	lsls	r2, r2, #21
 8004214:	430a      	orrs	r2, r1
 8004216:	491f      	ldr	r1, [pc, #124]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	610b      	str	r3, [r1, #16]
 800421c:	e011      	b.n	8004242 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421e:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004226:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6952      	ldr	r2, [r2, #20]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0652      	lsls	r2, r2, #25
 800423a:	430a      	orrs	r2, r1
 800423c:	4915      	ldr	r1, [pc, #84]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800424c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd fae5 	bl	800181c <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004254:	e009      	b.n	800426a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004256:	f7fd fae1 	bl	800181c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d902      	bls.n	800426a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	73fb      	strb	r3, [r7, #15]
          break;
 8004268:	e005      	b.n	8004276 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426a:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ef      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	4903      	ldr	r1, [pc, #12]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e049      	b.n	800433e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc ff50 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 fd68 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e049      	b.n	80043ec <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f841 	bl	80043f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fd11 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e049      	b.n	80044ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f841 	bl	80044b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fcb0 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x24>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e03c      	b.n	800456a <HAL_TIM_PWM_Start+0x9e>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d109      	bne.n	800450a <HAL_TIM_PWM_Start+0x3e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e02f      	b.n	800456a <HAL_TIM_PWM_Start+0x9e>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d109      	bne.n	8004524 <HAL_TIM_PWM_Start+0x58>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e022      	b.n	800456a <HAL_TIM_PWM_Start+0x9e>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d109      	bne.n	800453e <HAL_TIM_PWM_Start+0x72>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e015      	b.n	800456a <HAL_TIM_PWM_Start+0x9e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b10      	cmp	r3, #16
 8004542:	d109      	bne.n	8004558 <HAL_TIM_PWM_Start+0x8c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e008      	b.n	800456a <HAL_TIM_PWM_Start+0x9e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07e      	b.n	8004670 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0xb6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004580:	e023      	b.n	80045ca <HAL_TIM_PWM_Start+0xfe>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0xc6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004590:	e01b      	b.n	80045ca <HAL_TIM_PWM_Start+0xfe>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start+0xd6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a0:	e013      	b.n	80045ca <HAL_TIM_PWM_Start+0xfe>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start+0xe6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045b0:	e00b      	b.n	80045ca <HAL_TIM_PWM_Start+0xfe>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_PWM_Start+0xf6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c0:	e003      	b.n	80045ca <HAL_TIM_PWM_Start+0xfe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2201      	movs	r2, #1
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff72 	bl	80054bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_TIM_PWM_Start+0x1ac>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_TIM_PWM_Start+0x12a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a25      	ldr	r2, [pc, #148]	@ (800467c <HAL_TIM_PWM_Start+0x1b0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIM_PWM_Start+0x12a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a23      	ldr	r2, [pc, #140]	@ (8004680 <HAL_TIM_PWM_Start+0x1b4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_PWM_Start+0x12e>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <HAL_TIM_PWM_Start+0x130>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a18      	ldr	r2, [pc, #96]	@ (8004678 <HAL_TIM_PWM_Start+0x1ac>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIM_PWM_Start+0x162>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004622:	d004      	beq.n	800462e <HAL_TIM_PWM_Start+0x162>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	@ (800467c <HAL_TIM_PWM_Start+0x1b0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d115      	bne.n	800465a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <HAL_TIM_PWM_Start+0x1b8>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d015      	beq.n	800466c <HAL_TIM_PWM_Start+0x1a0>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004646:	d011      	beq.n	800466c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	e008      	b.n	800466c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e000      	b.n	800466e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb4b 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb3d 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb4e 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0204 	mvn.w	r2, #4
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb25 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb17 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb28 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0208 	mvn.w	r2, #8
 8004754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 faff 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 faf1 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb02 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0210 	mvn.w	r2, #16
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2208      	movs	r2, #8
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fad9 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 facb 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fadc 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 faa9 	bl	8004d46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800481a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 ff5b 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800483e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 ff53 	bl	80056ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa96 	bl	8004d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0220 	mvn.w	r2, #32
 8004886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff1b 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e066      	b.n	8004984 <HAL_TIM_OC_ConfigChannel+0xec>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b14      	cmp	r3, #20
 80048c2:	d857      	bhi.n	8004974 <HAL_TIM_OC_ConfigChannel+0xdc>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004921 	.word	0x08004921
 80048d0:	08004975 	.word	0x08004975
 80048d4:	08004975 	.word	0x08004975
 80048d8:	08004975 	.word	0x08004975
 80048dc:	0800492f 	.word	0x0800492f
 80048e0:	08004975 	.word	0x08004975
 80048e4:	08004975 	.word	0x08004975
 80048e8:	08004975 	.word	0x08004975
 80048ec:	0800493d 	.word	0x0800493d
 80048f0:	08004975 	.word	0x08004975
 80048f4:	08004975 	.word	0x08004975
 80048f8:	08004975 	.word	0x08004975
 80048fc:	0800494b 	.word	0x0800494b
 8004900:	08004975 	.word	0x08004975
 8004904:	08004975 	.word	0x08004975
 8004908:	08004975 	.word	0x08004975
 800490c:	08004959 	.word	0x08004959
 8004910:	08004975 	.word	0x08004975
 8004914:	08004975 	.word	0x08004975
 8004918:	08004975 	.word	0x08004975
 800491c:	08004967 	.word	0x08004967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fab0 	bl	8004e8c <TIM_OC1_SetConfig>
      break;
 800492c:	e025      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fb25 	bl	8004f84 <TIM_OC2_SetConfig>
      break;
 800493a:	e01e      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fb98 	bl	8005078 <TIM_OC3_SetConfig>
      break;
 8004948:	e017      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fc09 	bl	8005168 <TIM_OC4_SetConfig>
      break;
 8004956:	e010      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc60 	bl	8005224 <TIM_OC5_SetConfig>
      break;
 8004964:	e009      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fcb1 	bl	80052d4 <TIM_OC6_SetConfig>
      break;
 8004972:	e002      	b.n	800497a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	75fb      	strb	r3, [r7, #23]
      break;
 8004978:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004982:	7dfb      	ldrb	r3, [r7, #23]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e0ff      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b14      	cmp	r3, #20
 80049b6:	f200 80f0 	bhi.w	8004b9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049ba:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004b9b 	.word	0x08004b9b
 80049c8:	08004b9b 	.word	0x08004b9b
 80049cc:	08004b9b 	.word	0x08004b9b
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004b9b 	.word	0x08004b9b
 80049d8:	08004b9b 	.word	0x08004b9b
 80049dc:	08004b9b 	.word	0x08004b9b
 80049e0:	08004a97 	.word	0x08004a97
 80049e4:	08004b9b 	.word	0x08004b9b
 80049e8:	08004b9b 	.word	0x08004b9b
 80049ec:	08004b9b 	.word	0x08004b9b
 80049f0:	08004ad7 	.word	0x08004ad7
 80049f4:	08004b9b 	.word	0x08004b9b
 80049f8:	08004b9b 	.word	0x08004b9b
 80049fc:	08004b9b 	.word	0x08004b9b
 8004a00:	08004b19 	.word	0x08004b19
 8004a04:	08004b9b 	.word	0x08004b9b
 8004a08:	08004b9b 	.word	0x08004b9b
 8004a0c:	08004b9b 	.word	0x08004b9b
 8004a10:	08004b59 	.word	0x08004b59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fa36 	bl	8004e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	619a      	str	r2, [r3, #24]
      break;
 8004a52:	e0a5      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fa92 	bl	8004f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
      break;
 8004a94:	e084      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 faeb 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0208 	orr.w	r2, r2, #8
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0204 	bic.w	r2, r2, #4
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	61da      	str	r2, [r3, #28]
      break;
 8004ad4:	e064      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fb43 	bl	8005168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	021a      	lsls	r2, r3, #8
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	61da      	str	r2, [r3, #28]
      break;
 8004b16:	e043      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb80 	bl	8005224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b56:	e023      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fbb8 	bl	80052d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b98:	e002      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop

08004bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e0b6      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x18a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0c:	d03e      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xd8>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c12:	f200 8087 	bhi.w	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1a:	f000 8086 	beq.w	8004d2a <HAL_TIM_ConfigClockSource+0x176>
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c22:	d87f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c24:	2b70      	cmp	r3, #112	@ 0x70
 8004c26:	d01a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xaa>
 8004c28:	2b70      	cmp	r3, #112	@ 0x70
 8004c2a:	d87b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c2c:	2b60      	cmp	r3, #96	@ 0x60
 8004c2e:	d050      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x11e>
 8004c30:	2b60      	cmp	r3, #96	@ 0x60
 8004c32:	d877      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c34:	2b50      	cmp	r3, #80	@ 0x50
 8004c36:	d03c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xfe>
 8004c38:	2b50      	cmp	r3, #80	@ 0x50
 8004c3a:	d873      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d058      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x13e>
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d86f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d064      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15e>
 8004c48:	2b30      	cmp	r3, #48	@ 0x30
 8004c4a:	d86b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d060      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15e>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d867      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15e>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d05a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15e>
 8004c5c:	e062      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	f000 fc05 	bl	800547c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e04f      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	f000 fbee 	bl	800547c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e03c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fb62 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2150      	movs	r1, #80	@ 0x50
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fbbb 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e02c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 fb81 	bl	80053e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2160      	movs	r1, #96	@ 0x60
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fbab 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fb42 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2140      	movs	r1, #64	@ 0x40
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fb9b 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 fb92 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a30      	ldr	r2, [pc, #192]	@ (8004e80 <TIM_Base_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x20>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a27      	ldr	r2, [pc, #156]	@ (8004e80 <TIM_Base_SetConfig+0xd4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <TIM_Base_SetConfig+0x52>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d007      	beq.n	8004dfe <TIM_Base_SetConfig+0x52>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a24      	ldr	r2, [pc, #144]	@ (8004e84 <TIM_Base_SetConfig+0xd8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_Base_SetConfig+0x52>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <TIM_Base_SetConfig+0xdc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d108      	bne.n	8004e10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <TIM_Base_SetConfig+0xd4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0xa0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <TIM_Base_SetConfig+0xd8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0xa0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a10      	ldr	r2, [pc, #64]	@ (8004e88 <TIM_Base_SetConfig+0xdc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]
  }
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400

08004e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f023 0201 	bic.w	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a24      	ldr	r2, [pc, #144]	@ (8004f78 <TIM_OC1_SetConfig+0xec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_OC1_SetConfig+0x70>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a23      	ldr	r2, [pc, #140]	@ (8004f7c <TIM_OC1_SetConfig+0xf0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC1_SetConfig+0x70>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a22      	ldr	r2, [pc, #136]	@ (8004f80 <TIM_OC1_SetConfig+0xf4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10c      	bne.n	8004f16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0308 	bic.w	r3, r3, #8
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <TIM_OC1_SetConfig+0xec>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_OC1_SetConfig+0xa2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <TIM_OC1_SetConfig+0xf0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC1_SetConfig+0xa2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <TIM_OC1_SetConfig+0xf4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400

08004f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f023 0210 	bic.w	r2, r3, #16
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0320 	bic.w	r3, r3, #32
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a22      	ldr	r2, [pc, #136]	@ (800506c <TIM_OC2_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10d      	bne.n	8005004 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a19      	ldr	r2, [pc, #100]	@ (800506c <TIM_OC2_SetConfig+0xe8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_OC2_SetConfig+0x98>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <TIM_OC2_SetConfig+0xec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_OC2_SetConfig+0x98>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <TIM_OC2_SetConfig+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d113      	bne.n	8005044 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a21      	ldr	r2, [pc, #132]	@ (800515c <TIM_OC3_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a18      	ldr	r2, [pc, #96]	@ (800515c <TIM_OC3_SetConfig+0xe4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC3_SetConfig+0x96>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <TIM_OC3_SetConfig+0xe8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC3_SetConfig+0x96>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <TIM_OC3_SetConfig+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400

08005168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	031b      	lsls	r3, r3, #12
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a14      	ldr	r2, [pc, #80]	@ (8005218 <TIM_OC4_SetConfig+0xb0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <TIM_OC4_SetConfig+0x74>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a13      	ldr	r2, [pc, #76]	@ (800521c <TIM_OC4_SetConfig+0xb4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_OC4_SetConfig+0x74>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a12      	ldr	r2, [pc, #72]	@ (8005220 <TIM_OC4_SetConfig+0xb8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d109      	bne.n	80051f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400

08005224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a13      	ldr	r2, [pc, #76]	@ (80052c8 <TIM_OC5_SetConfig+0xa4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC5_SetConfig+0x6a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a12      	ldr	r2, [pc, #72]	@ (80052cc <TIM_OC5_SetConfig+0xa8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC5_SetConfig+0x6a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a11      	ldr	r2, [pc, #68]	@ (80052d0 <TIM_OC5_SetConfig+0xac>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d109      	bne.n	80052a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005294:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400

080052d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	051b      	lsls	r3, r3, #20
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a14      	ldr	r2, [pc, #80]	@ (800537c <TIM_OC6_SetConfig+0xa8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_OC6_SetConfig+0x6c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a13      	ldr	r2, [pc, #76]	@ (8005380 <TIM_OC6_SetConfig+0xac>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC6_SetConfig+0x6c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a12      	ldr	r2, [pc, #72]	@ (8005384 <TIM_OC6_SetConfig+0xb0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400

08005388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f023 0210 	bic.w	r2, r3, #16
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	f043 0307 	orr.w	r3, r3, #7
 8005468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e04f      	b.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a21      	ldr	r2, [pc, #132]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005550:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a14      	ldr	r2, [pc, #80]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d004      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10c      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800559a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40014000 	.word	0x40014000

080055d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e060      	b.n	80056b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d115      	bne.n	80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	051b      	lsls	r3, r3, #20
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e040      	b.n	8005794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fdde 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	@ 0x24
 800572c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fda8 	bl	800629c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb4b 	bl	8005de8 <UART_SetConfig>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e01b      	b.n	8005794 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800576a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800577a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fe27 	bl	80063e0 <UART_CheckIdleState>
 8005792:	4603      	mov	r3, r0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0ba      	sub	sp, #232	@ 0xe8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057ca:	4013      	ands	r3, r2
 80057cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d115      	bne.n	8005804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 82ca 	beq.w	8005d8e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
      }
      return;
 8005802:	e2c4      	b.n	8005d8e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8117 	beq.w	8005a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800580e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800581a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800581e:	4b85      	ldr	r3, [pc, #532]	@ (8005a34 <HAL_UART_IRQHandler+0x298>)
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 810a 	beq.w	8005a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d011      	beq.n	8005858 <HAL_UART_IRQHandler+0xbc>
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d011      	beq.n	8005888 <HAL_UART_IRQHandler+0xec>
 8005864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2202      	movs	r2, #2
 8005876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d011      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
 8005894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2204      	movs	r2, #4
 80058a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ae:	f043 0202 	orr.w	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2208      	movs	r2, #8
 80058e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ea:	f043 0208 	orr.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d012      	beq.n	8005926 <HAL_UART_IRQHandler+0x18a>
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8230 	beq.w	8005d92 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005976:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04f      	beq.n	8005a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fe43 	bl	800660a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598e:	2b40      	cmp	r3, #64	@ 0x40
 8005990:	d141      	bne.n	8005a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d9      	bne.n	8005992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d013      	beq.n	8005a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ea:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <HAL_UART_IRQHandler+0x29c>)
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc fffa 	bl	80029ec <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d017      	beq.n	8005a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00f      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9d4 	bl	8005dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e00b      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f9d0 	bl	8005dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	e007      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9cc 	bl	8005dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a2c:	e1b1      	b.n	8005d92 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2e:	bf00      	nop
    return;
 8005a30:	e1af      	b.n	8005d92 <HAL_UART_IRQHandler+0x5f6>
 8005a32:	bf00      	nop
 8005a34:	04000120 	.word	0x04000120
 8005a38:	080066d3 	.word	0x080066d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 816a 	bne.w	8005d1a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8163 	beq.w	8005d1a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 815c 	beq.w	8005d1a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2210      	movs	r2, #16
 8005a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	f040 80d4 	bne.w	8005c22 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80ad 	beq.w	8005bea <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f080 80a5 	bcs.w	8005bea <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8086 	bne.w	8005bc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005aea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1da      	bne.n	8005abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e1      	bne.n	8005b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e3      	bne.n	8005b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005baa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e4      	bne.n	8005b88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fc fed4 	bl	8002970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8f4 	bl	8005dd0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005be8:	e0d5      	b.n	8005d96 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f040 80ce 	bne.w	8005d96 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	f040 80c5 	bne.w	8005d96 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8d8 	bl	8005dd0 <HAL_UARTEx_RxEventCallback>
      return;
 8005c20:	e0b9      	b.n	8005d96 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80ab 	beq.w	8005d9a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80a6 	beq.w	8005d9a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e4      	bne.n	8005c4e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	623b      	str	r3, [r7, #32]
   return(result);
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ca8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e4      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f85c 	bl	8005dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d18:	e03f      	b.n	8005d9a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <HAL_UART_IRQHandler+0x5a8>
 8005d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fd08 	bl	8006752 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d42:	e02d      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01c      	beq.n	8005d9e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
    }
    return;
 8005d6c:	e017      	b.n	8005d9e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d012      	beq.n	8005da0 <HAL_UART_IRQHandler+0x604>
 8005d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00c      	beq.n	8005da0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fcb9 	bl	80066fe <UART_EndTransmit_IT>
    return;
 8005d8c:	e008      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
      return;
 8005d8e:	bf00      	nop
 8005d90:	e006      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
    return;
 8005d92:	bf00      	nop
 8005d94:	e004      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
      return;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
      return;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_UART_IRQHandler+0x604>
    return;
 8005d9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005da0:	37e8      	adds	r7, #232	@ 0xe8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b08a      	sub	sp, #40	@ 0x28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b9e      	ldr	r3, [pc, #632]	@ (8006090 <UART_SetConfig+0x2a8>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a93      	ldr	r2, [pc, #588]	@ (8006094 <UART_SetConfig+0x2ac>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e50:	4313      	orrs	r3, r2
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a8a      	ldr	r2, [pc, #552]	@ (8006098 <UART_SetConfig+0x2b0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d126      	bne.n	8005ec0 <UART_SetConfig+0xd8>
 8005e72:	4b8a      	ldr	r3, [pc, #552]	@ (800609c <UART_SetConfig+0x2b4>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d81b      	bhi.n	8005eb8 <UART_SetConfig+0xd0>
 8005e80:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0xa0>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005e99 	.word	0x08005e99
 8005e8c:	08005ea9 	.word	0x08005ea9
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005eb1 	.word	0x08005eb1
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e0ab      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e0a7      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e0a3      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb6:	e09f      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	e09b      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a76      	ldr	r2, [pc, #472]	@ (80060a0 <UART_SetConfig+0x2b8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d138      	bne.n	8005f3c <UART_SetConfig+0x154>
 8005eca:	4b74      	ldr	r3, [pc, #464]	@ (800609c <UART_SetConfig+0x2b4>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b0c      	cmp	r3, #12
 8005ed6:	d82d      	bhi.n	8005f34 <UART_SetConfig+0x14c>
 8005ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0xf8>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f15 	.word	0x08005f15
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f35 	.word	0x08005f35
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f1d 	.word	0x08005f1d
 8005f04:	08005f35 	.word	0x08005f35
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1a:	e06d      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f22:	e069      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2a:	e065      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f32:	e061      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3a:	e05d      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a58      	ldr	r2, [pc, #352]	@ (80060a4 <UART_SetConfig+0x2bc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d125      	bne.n	8005f92 <UART_SetConfig+0x1aa>
 8005f46:	4b55      	ldr	r3, [pc, #340]	@ (800609c <UART_SetConfig+0x2b4>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f50:	2b30      	cmp	r3, #48	@ 0x30
 8005f52:	d016      	beq.n	8005f82 <UART_SetConfig+0x19a>
 8005f54:	2b30      	cmp	r3, #48	@ 0x30
 8005f56:	d818      	bhi.n	8005f8a <UART_SetConfig+0x1a2>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d00a      	beq.n	8005f72 <UART_SetConfig+0x18a>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d814      	bhi.n	8005f8a <UART_SetConfig+0x1a2>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <UART_SetConfig+0x182>
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d008      	beq.n	8005f7a <UART_SetConfig+0x192>
 8005f68:	e00f      	b.n	8005f8a <UART_SetConfig+0x1a2>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f70:	e042      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f72:	2302      	movs	r3, #2
 8005f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f78:	e03e      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f80:	e03a      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f82:	2308      	movs	r3, #8
 8005f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f88:	e036      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f8a:	2310      	movs	r3, #16
 8005f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f90:	e032      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <UART_SetConfig+0x2ac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d12a      	bne.n	8005ff2 <UART_SetConfig+0x20a>
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <UART_SetConfig+0x2b4>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005faa:	d01a      	beq.n	8005fe2 <UART_SetConfig+0x1fa>
 8005fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb0:	d81b      	bhi.n	8005fea <UART_SetConfig+0x202>
 8005fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fb6:	d00c      	beq.n	8005fd2 <UART_SetConfig+0x1ea>
 8005fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fbc:	d815      	bhi.n	8005fea <UART_SetConfig+0x202>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <UART_SetConfig+0x1e2>
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc6:	d008      	beq.n	8005fda <UART_SetConfig+0x1f2>
 8005fc8:	e00f      	b.n	8005fea <UART_SetConfig+0x202>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd0:	e012      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd8:	e00e      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe0:	e00a      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe8:	e006      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005fea:	2310      	movs	r3, #16
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff0:	e002      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a25      	ldr	r2, [pc, #148]	@ (8006094 <UART_SetConfig+0x2ac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	f040 808a 	bne.w	8006118 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006008:	2b08      	cmp	r3, #8
 800600a:	d824      	bhi.n	8006056 <UART_SetConfig+0x26e>
 800600c:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x22c>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006039 	.word	0x08006039
 8006018:	08006057 	.word	0x08006057
 800601c:	08006041 	.word	0x08006041
 8006020:	08006057 	.word	0x08006057
 8006024:	08006047 	.word	0x08006047
 8006028:	08006057 	.word	0x08006057
 800602c:	08006057 	.word	0x08006057
 8006030:	08006057 	.word	0x08006057
 8006034:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fd fd98 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 800603c:	61f8      	str	r0, [r7, #28]
        break;
 800603e:	e010      	b.n	8006062 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <UART_SetConfig+0x2c0>)
 8006042:	61fb      	str	r3, [r7, #28]
        break;
 8006044:	e00d      	b.n	8006062 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7fd fcfb 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800604a:	61f8      	str	r0, [r7, #28]
        break;
 800604c:	e009      	b.n	8006062 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006052:	61fb      	str	r3, [r7, #28]
        break;
 8006054:	e005      	b.n	8006062 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8109 	beq.w	800627c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	4413      	add	r3, r2
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d305      	bcc.n	8006086 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	429a      	cmp	r2, r3
 8006084:	d912      	bls.n	80060ac <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800608c:	e0f6      	b.n	800627c <UART_SetConfig+0x494>
 800608e:	bf00      	nop
 8006090:	efff69f3 	.word	0xefff69f3
 8006094:	40008000 	.word	0x40008000
 8006098:	40013800 	.word	0x40013800
 800609c:	40021000 	.word	0x40021000
 80060a0:	40004400 	.word	0x40004400
 80060a4:	40004800 	.word	0x40004800
 80060a8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2200      	movs	r2, #0
 80060b0:	461c      	mov	r4, r3
 80060b2:	4615      	mov	r5, r2
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	022b      	lsls	r3, r5, #8
 80060be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060c2:	0222      	lsls	r2, r4, #8
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	6849      	ldr	r1, [r1, #4]
 80060c8:	0849      	lsrs	r1, r1, #1
 80060ca:	2000      	movs	r0, #0
 80060cc:	4688      	mov	r8, r1
 80060ce:	4681      	mov	r9, r0
 80060d0:	eb12 0a08 	adds.w	sl, r2, r8
 80060d4:	eb43 0b09 	adc.w	fp, r3, r9
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e6:	4650      	mov	r0, sl
 80060e8:	4659      	mov	r1, fp
 80060ea:	f7fa f86f 	bl	80001cc <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4613      	mov	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060fc:	d308      	bcc.n	8006110 <UART_SetConfig+0x328>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006104:	d204      	bcs.n	8006110 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	e0b5      	b.n	800627c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006116:	e0b1      	b.n	800627c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006120:	d15d      	bne.n	80061de <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006122:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006126:	2b08      	cmp	r3, #8
 8006128:	d827      	bhi.n	800617a <UART_SetConfig+0x392>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <UART_SetConfig+0x348>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	0800617b 	.word	0x0800617b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800617b 	.word	0x0800617b
 8006148:	0800617b 	.word	0x0800617b
 800614c:	0800617b 	.word	0x0800617b
 8006150:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006154:	f7fd fd0a 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006158:	61f8      	str	r0, [r7, #28]
        break;
 800615a:	e014      	b.n	8006186 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800615c:	f7fd fd1c 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8006160:	61f8      	str	r0, [r7, #28]
        break;
 8006162:	e010      	b.n	8006186 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b4c      	ldr	r3, [pc, #304]	@ (8006298 <UART_SetConfig+0x4b0>)
 8006166:	61fb      	str	r3, [r7, #28]
        break;
 8006168:	e00d      	b.n	8006186 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd fc69 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800616e:	61f8      	str	r0, [r7, #28]
        break;
 8006170:	e009      	b.n	8006186 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006176:	61fb      	str	r3, [r7, #28]
        break;
 8006178:	e005      	b.n	8006186 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d077      	beq.n	800627c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	005a      	lsls	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	441a      	add	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b0f      	cmp	r3, #15
 80061a6:	d916      	bls.n	80061d6 <UART_SetConfig+0x3ee>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ae:	d212      	bcs.n	80061d6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f023 030f 	bic.w	r3, r3, #15
 80061b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	8afb      	ldrh	r3, [r7, #22]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	8afa      	ldrh	r2, [r7, #22]
 80061d2:	60da      	str	r2, [r3, #12]
 80061d4:	e052      	b.n	800627c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061dc:	e04e      	b.n	800627c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d827      	bhi.n	8006236 <UART_SetConfig+0x44e>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <UART_SetConfig+0x404>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006237 	.word	0x08006237
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
 800620c:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fd fcac 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e014      	b.n	8006242 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006218:	f7fd fcbe 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e010      	b.n	8006242 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <UART_SetConfig+0x4b0>)
 8006222:	61fb      	str	r3, [r7, #28]
        break;
 8006224:	e00d      	b.n	8006242 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd fc0b 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800622a:	61f8      	str	r0, [r7, #28]
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006232:	61fb      	str	r3, [r7, #28]
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006240:	bf00      	nop
    }

    if (pclk != 0U)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d019      	beq.n	800627c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	085a      	lsrs	r2, r3, #1
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	d909      	bls.n	8006276 <UART_SetConfig+0x48e>
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d205      	bcs.n	8006276 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e002      	b.n	800627c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006288:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800628c:	4618      	mov	r0, r3
 800628e:	3728      	adds	r7, #40	@ 0x28
 8006290:	46bd      	mov	sp, r7
 8006292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006296:	bf00      	nop
 8006298:	00f42400 	.word	0x00f42400

0800629c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01a      	beq.n	80063b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800639a:	d10a      	bne.n	80063b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	605a      	str	r2, [r3, #4]
  }
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b098      	sub	sp, #96	@ 0x60
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f0:	f7fb fa14 	bl	800181c <HAL_GetTick>
 80063f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b08      	cmp	r3, #8
 8006402:	d12e      	bne.n	8006462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640c:	2200      	movs	r2, #0
 800640e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f88c 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d021      	beq.n	8006462 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006432:	653b      	str	r3, [r7, #80]	@ 0x50
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800643c:	647b      	str	r3, [r7, #68]	@ 0x44
 800643e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800644a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e062      	b.n	8006528 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b04      	cmp	r3, #4
 800646e:	d149      	bne.n	8006504 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006478:	2200      	movs	r2, #0
 800647a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f856 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d03c      	beq.n	8006504 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	623b      	str	r3, [r7, #32]
   return(result);
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800649e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e6      	bne.n	800648a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0301 	bic.w	r3, r3, #1
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064dc:	61fa      	str	r2, [r7, #28]
 80064de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	69b9      	ldr	r1, [r7, #24]
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e011      	b.n	8006528 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3758      	adds	r7, #88	@ 0x58
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006540:	e04f      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d04b      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fb f967 	bl	800181c <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <UART_WaitOnFlagUntilTimeout+0x30>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e04e      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d037      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b80      	cmp	r3, #128	@ 0x80
 8006576:	d034      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b40      	cmp	r3, #64	@ 0x40
 800657c:	d031      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d110      	bne.n	80065ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2208      	movs	r2, #8
 8006592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f838 	bl	800660a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2208      	movs	r2, #8
 800659e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e029      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065bc:	d111      	bne.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f81e 	bl	800660a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e00f      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d0a0      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660a:	b480      	push	{r7}
 800660c:	b095      	sub	sp, #84	@ 0x54
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006630:	643b      	str	r3, [r7, #64]	@ 0x40
 8006632:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006636:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800663e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e6      	bne.n	8006612 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	61fb      	str	r3, [r7, #28]
   return(result);
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800666a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667c:	2b01      	cmp	r3, #1
 800667e:	d118      	bne.n	80066b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	60bb      	str	r3, [r7, #8]
   return(result);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f023 0310 	bic.w	r3, r3, #16
 8006694:	647b      	str	r3, [r7, #68]	@ 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6979      	ldr	r1, [r7, #20]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	613b      	str	r3, [r7, #16]
   return(result);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066c6:	bf00      	nop
 80066c8:	3754      	adds	r7, #84	@ 0x54
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fb63 	bl	8005dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b088      	sub	sp, #32
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60bb      	str	r3, [r7, #8]
   return(result);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	613b      	str	r3, [r7, #16]
   return(result);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fb2f 	bl	8005da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674a:	bf00      	nop
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <memset>:
 8006766:	4402      	add	r2, r0
 8006768:	4603      	mov	r3, r0
 800676a:	4293      	cmp	r3, r2
 800676c:	d100      	bne.n	8006770 <memset+0xa>
 800676e:	4770      	bx	lr
 8006770:	f803 1b01 	strb.w	r1, [r3], #1
 8006774:	e7f9      	b.n	800676a <memset+0x4>
	...

08006778 <__libc_init_array>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	4d0d      	ldr	r5, [pc, #52]	@ (80067b0 <__libc_init_array+0x38>)
 800677c:	4c0d      	ldr	r4, [pc, #52]	@ (80067b4 <__libc_init_array+0x3c>)
 800677e:	1b64      	subs	r4, r4, r5
 8006780:	10a4      	asrs	r4, r4, #2
 8006782:	2600      	movs	r6, #0
 8006784:	42a6      	cmp	r6, r4
 8006786:	d109      	bne.n	800679c <__libc_init_array+0x24>
 8006788:	4d0b      	ldr	r5, [pc, #44]	@ (80067b8 <__libc_init_array+0x40>)
 800678a:	4c0c      	ldr	r4, [pc, #48]	@ (80067bc <__libc_init_array+0x44>)
 800678c:	f000 f818 	bl	80067c0 <_init>
 8006790:	1b64      	subs	r4, r4, r5
 8006792:	10a4      	asrs	r4, r4, #2
 8006794:	2600      	movs	r6, #0
 8006796:	42a6      	cmp	r6, r4
 8006798:	d105      	bne.n	80067a6 <__libc_init_array+0x2e>
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a0:	4798      	blx	r3
 80067a2:	3601      	adds	r6, #1
 80067a4:	e7ee      	b.n	8006784 <__libc_init_array+0xc>
 80067a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067aa:	4798      	blx	r3
 80067ac:	3601      	adds	r6, #1
 80067ae:	e7f2      	b.n	8006796 <__libc_init_array+0x1e>
 80067b0:	08006828 	.word	0x08006828
 80067b4:	08006828 	.word	0x08006828
 80067b8:	08006828 	.word	0x08006828
 80067bc:	0800682c 	.word	0x0800682c

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
